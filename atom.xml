<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.leepanda.top</id>
    <title>戏</title>
    <updated>2021-05-29T10:43:25.182Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.leepanda.top"/>
    <link rel="self" href="https://blog.leepanda.top/atom.xml"/>
    <logo>https://blog.leepanda.top/images/avatar.png</logo>
    <icon>https://blog.leepanda.top/favicon.ico</icon>
    <rights>All rights reserved 2021, 戏</rights>
    <entry>
        <title type="html"><![CDATA[okchain源码阅读1:宏观框架]]></title>
        <id>https://blog.leepanda.top/post/okchain-yuan-ma-yue-du-1hong-guan-kuang-jia/</id>
        <link href="https://blog.leepanda.top/post/okchain-yuan-ma-yue-du-1hong-guan-kuang-jia/">
        </link>
        <updated>2021-05-29T10:41:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="摘要">摘要</h1>
<p>okchain作为okex的公链项目，功能面向交易所交易撮合。<br>
代码实现上，基于cosmos和tendermint两个框架来实现。<br>
这里记录一下他的实现的大概框架。<br>
公链项目链接是https://github.com/okex/okchain</p>
<hr>
<h1 id="重点框架">重点框架</h1>
<ul>
<li>投票机制——一票多投<br>
涉及模块</li>
</ul>
<blockquote>
<p>staking 投票质押逻辑<br>
distribution<br>
slashing  非法投票惩罚 ( 感觉这个会是审计重点</p>
</blockquote>
<ul>
<li>opendex<br>
涉及模块</li>
</ul>
<blockquote>
<p>order<br>
token<br>
dex</p>
</blockquote>
<hr>
<h1 id="投票机制">投票机制</h1>
<h3 id="创建validator或cva">创建validator或cva</h3>
<ul>
<li>msd数量就是va的初始票数，msd对应的初始票不能一票多投。</li>
<li>va可以是脱离node的存在。可以通过unbond操作使node和va分开。</li>
<li>任意一个va最终所得票(share) == msd + 其他节点投给自己的token</li>
</ul>
<h3 id="注销va或cva">注销va或cva</h3>
<p>状态改变<br>
<code>bonded -&gt; unbonding -&gt; unbonded</code></p>
<ul>
<li>该操作是赎回msd的唯一手段。</li>
</ul>
<h3 id="投票">投票</h3>
<ul>
<li>投票的权重每周衰减一次。</li>
</ul>
<h3 id="撤销投票">撤销投票</h3>
<p>就是撤销投票</p>
<h3 id="抵押">抵押</h3>
<p>就是抵押</p>
<hr>
<h3 id="如何出块">如何出块</h3>
<p>252个块一轮，21个va轮流出块。<br>
每轮结束 重新选举21个va。</p>
<h3 id="如何选举">如何选举</h3>
<p>share得票按数量排序，选前21个。其他为cva。</p>
<h3 id="增发">增发</h3>
<p>每年增发1%<br>
没3秒一个块，一年有10512000个块。</p>
<h3 id="奖励">奖励</h3>
<p>每个块的奖励1/4给va，3/4给投票给va的va和cva们。<br>
每个块上链时立刻结算，会存放到奖金池中，需要节点自己手动领取。</p>
<hr>
<h1 id="opendex">opendex</h1>
<h3 id="基本功能">基本功能</h3>
<ul>
<li>上架数字资产交易对</li>
</ul>
<blockquote>
<p>Dex运营方发型数字资产交易对，手续费20000OKT。</p>
</blockquote>
<ul>
<li>下架数字资产交易对</li>
</ul>
<blockquote>
<p>DEX运营方下架数字资产交易对，手续费0.0125OKT。</p>
</blockquote>
<ul>
<li>增加数字资产交易对撮合金</li>
</ul>
<blockquote>
<p>DEX运营方抵押任意数量OKT，优先撮合撮合金高的币对交易，手续费归DEX运营方</p>
</blockquote>
<ul>
<li>提取数字资产交易对撮合金</li>
<li>手续费</li>
</ul>
<blockquote>
<p>预先锁定259200个区块高度所使用的手续费(单位OKT)，余额不足下单失败，默认0.25920OKT。当订单被撮合或者过期时，将手续费分给BP节点们。<br>
多余的手续费会返还。</p>
</blockquote>
<h3 id="额外功能">额外功能</h3>
<ul>
<li>限制数字资产交易对的高频上架</li>
<li>限制重名币或诈骗币</li>
<li>限制垃圾币和有价值的币之间产生系统资源竞争</li>
<li>交易对所有权转移</li>
</ul>
<hr>
<h1 id="va-bond状态变换">va bond状态变换</h1>
<p>每个va都维护了state变量，来描述va的合法性。是正常运行、崩溃、还是非法运行等。<br>
va创建之后会进入unbonded状态。被区块确认权限之后，进入bonded状态。</p>
<h3 id="bonded-unbonding">bonded -&gt; unbonding</h3>
<ul>
<li>执行destroy validator</li>
<li>出块超时</li>
<li>正常轮替</li>
</ul>
<h3 id="unbonding-unbonded">unbonding -&gt; unbonded</h3>
<ul>
<li>unbonding周期结束 自动进入unbonded</li>
</ul>
<h3 id="unbonded-bonded">unbonded -&gt; bonded</h3>
<ul>
<li>正常轮替 (但是如果jailed，需要提前发起unjailed tx</li>
</ul>
<h3 id="unbonded-kicked-off">unbonded -&gt; kicked off</h3>
<p>share 和msd都为0，就会被剔除va set。<br>
也就是没人选它，把投给他的token都赎回。而且他自己也赎回了msd</p>
<h3 id="unbonding-kicked-off">unbonding -&gt; kicked off</h3>
<p>unbonding周期结束后，如果 share == 0 and msd == 0,就直接kicked off</p>
<h3 id="unbonding-bonded">unbonding -&gt; bonded</h3>
<p>无需等待unbonding周期结束，过程中如果share票数极高，排名在全网前21名内，直接进入bonded状态。</p>
<hr>
<h1 id="slashing">slashing</h1>
<p>节点非法行为的处罚机制</p>
<h3 id="在同一高度对多个block签名">在同一高度，对多个block签名。</h3>
<ul>
<li>罚款所有抵押的5%</li>
<li>bonded -&gt; unbonding</li>
<li>jailed 为 无期徒刑，不能上诉。</li>
</ul>
<h3 id="validator-漏签名了太多的block">validator 漏签名了太多的block</h3>
<ul>
<li>漏签50个block 会惩罚一次</li>
<li>每次惩罚 va全部抵押的 1%</li>
<li>jailed 600s 刑满之后，要主动发起unjailed tx才能被释放。</li>
</ul>
<h3 id="主动发送-destroy-validator交易">主动发送 destroy validator交易</h3>
<ul>
<li>bonded -&gt; unbonding</li>
<li>unbonding -&gt; unbonding</li>
<li>jailed 为无期徒刑</li>
<li>msd进入赎回状态</li>
</ul>
<hr>
<h1 id="遗留问题">遗留问题</h1>
<h3 id="文档中的概念疑惑点">文档中的概念疑惑点</h3>
<ul>
<li>数字资产交易对是个啥</li>
<li>最小自委托msd是什么</li>
<li>va从unbonded到bonded这个确认promotion的过程怎么实现的？</li>
<li>bonded到底是什么意思？区分va和cva?</li>
<li>正常轮替是什么意思</li>
<li>unbonding 周期具体实现？时间还是啥？</li>
<li>va miss 签名 指的是不是 没有vote</li>
<li>miss50  是连续还是累计？</li>
</ul>
<h3 id="可能出现的问题">可能出现的问题</h3>
<ul>
<li>返还手续费这个地方 有没有快乐溢出。</li>
<li>余额不足下单失败的地方，有没有快乐溢出。</li>
<li>如何限制重名币，是否存在恶意抢注币名</li>
<li>恶意诬陷validator 使之jailed</li>
<li>如何判定MSD初始票和一般票之间的区别，从而限制一票多投。</li>
<li>赎回msd的时候，能不能做些文章，比如归还给谁；先还钱后注销；等问题。</li>
<li>能不能给死人投票？只要票数足够，死人无法卸任？</li>
<li>block出块时签名如果重用，直接死刑。这个如果能诬陷就严重了。</li>
<li>以他人身份发送 destroy validator交易，判死刑</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一篇文章看懂cosmos重委托漏洞]]></title>
        <id>https://blog.leepanda.top/post/yi-pian-wen-zhang-kan-dong-cosmos-chong-wei-tuo-lou-dong/</id>
        <link href="https://blog.leepanda.top/post/yi-pian-wen-zhang-kan-dong-cosmos-chong-wei-tuo-lou-dong/">
        </link>
        <updated>2021-05-29T10:39:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="摘要">摘要</h1>
<p>Cosmos SDK 在 2019年 5 月底发现存在严重安全漏洞，该团队随后发布了补丁，并与全球验证人共同进行了升级，从收到漏洞报告到修复主网共用了72小时。</p>
<blockquote>
<p>攻击者可利用该漏洞绕过委托金赎回时的锁定时间。</p>
</blockquote>
<p>在介绍漏洞细节之前，先介绍一下cosmos的投票机制。</p>
<h3 id="staking投票机制">staking：投票机制</h3>
<p>Cosmos中持币人可以将自己的货币委托给validator，当validator出块时，持币人获得收益。<br>
当持币人遇到了佣金更低、网络状态更好的validator，不想继续委托原来的validator时。<br>
可以unbond之前的validator。这需要等待21天。21天结束之后，委托的货币会被返还，然后持币人就可以委托其他validator了。</p>
<h3 id="redelegation一键更换validator">redelegation：一键更换validator</h3>
<p>redelegation功能 使持币人不用等待21天的unbonding周期，可以立即更换至其他validators。<br>
唯一的限制是21天时间内，最多更换7次validators。<br>
目前 Cosmostation 钱包已经支持redelegation功能。<br>
<img src="https://img-blog.csdnimg.cn/20200511143059990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="redelegation截图" loading="lazy"></p>
<h1 id="漏洞介绍">漏洞介绍</h1>
<p>Cosmos重委托漏洞，使得持币人在赎回委托金时，不必再等待21天的时间。<br>
Cosmos 团队的 Jack Zampolin 分享了一个程序，可以发现那些利用漏洞提前撤回委托的恶意交易。<br>
<img src="https://img-blog.csdnimg.cn/20200511150056418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="Jack Zampolin" loading="lazy"></p>
<p>该漏洞导致7250个Atom代币被提前赎回，当时每个Atom价值6美元。<br>
截止2019年5月31日，使用上述恶意方法解除委托的 Atoms 大约为43,500美元。</p>
<h3 id="补丁代码分析">补丁代码分析</h3>
<p>Cosmos SDK 0.34.6 版本发布了重委托漏洞的补丁，并在区块高度 482100 时（大约2019年5月31日早上 10 点）生效。</p>
<p>cosmos重委托漏洞 补丁commit 链接如下：<br>
<a href="https://github.com/cosmos/cosmos-sdk/commit/80234baf91a15dd9a7df8dca38677b66b8d148c1">https://github.com/cosmos/cosmos-sdk/commit/80234baf91a15dd9a7df8dca38677b66b8d148c1</a></p>
<p>代码修改的重点在于<br>
github.com/cosmos/cosmos-sdk/x/staking/keeper/delegation.go,L585-L638:<br>
Keeper.Undelegate函数<br>
<img src="https://img-blog.csdnimg.cn/20200511174633935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="代码修改" loading="lazy"><br>
可见Undelegate函数中592行做了一个硬分叉，分叉高度是<code>UndelegatePatchHeight</code>等于<code>482100</code>。</p>
<p>在分叉高度前的代码中，有一处关于<code>completeNow</code>的判断</p>
<pre><code class="language-go">if completeNow {
	balance := sdk.NewCoin(k.BondDenom(ctx), returnAmount)
	if !balance.IsZero() {
		if _, err := k.bankKeeper.UndelegateCoins(ctx, delAddr, sdk.Coins{balance}); err != nil {
			return completionTime, err
		}
	}
	return completionTime, nil
}
</code></pre>
<p>如果completeNow等于 True，就直接退还委托的货币，而无需等待21天。<br>
在Keeper.getBeginInfo函数中，我们发现<br>
要使completeNow == True，需要<code>validator.status == sdk.Unbonded</code><br>
<img src="https://img-blog.csdnimg.cn/20200511200014718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="completeNow=True" loading="lazy"></p>
<h3 id="不同的completetime-completenow">不同的completeTime / completeNow</h3>
<p>当持币人想要撤销对validator的委托时，需要等待completeTime后，委托金才会返还给持币人。<br>
对于completeTime，不同情况有不同的值。</p>
<ul>
<li>如果validator此时是Bonded状态，赎回委托金需要经历21天的时间。</li>
<li>如果validator处于UnBonding状态，持币人从该validator解绑定需要的锁定期等于该validator的锁定期（小于或等于21天）。</li>
<li>如果validator处于UnBonded状态，则不需要锁定期，持币人抵押的股权可立即变回代币。这也就是上面代码中提到的<code>validator.status == sdk.Unbonded</code>则<code>completeNow == True</code></li>
</ul>
<p>这样设计的本意的是，当validator节点因作恶或意外被Jail后，持币人可以尽快取回抵押的股权，避免造成损失。</p>
<h3 id="漏洞利用方法">漏洞利用方法</h3>
<p>攻击者想要撤销对validatorA的委托，拿回委托金。但是又不想等待21天的unbonding。<br>
于是攻击者使用cosmostation钱包提供的redelegation方法，将委托对象立刻转换为一个状态为Unbonded的validator。<br>
接着再进行undelegate操作，Keeper.Undelegate函数收到<code>completeNow == True</code><br>
便调用<code>k.bankKeeper.UndelegateCoins</code>立刻归还了委托金。<br>
攻击者便可以绕过锁定期限制，瞬间赎回委托金。</p>
<h3 id="漏洞危害">漏洞危害</h3>
<p>漏洞不会造成用户的财产损失，但是可以让攻击者绕过21天的委托金锁定。<br>
这会让cosmos设计的经济模型变得不稳定，破坏交易的公平。</p>
<h1 id="总结">总结</h1>
<p>cosmos重委托漏洞的本质，是新功能redelegation和旧功能unbonded立刻赎回机制，两者的逻辑出现冲突。<br>
在开发过程中，开发人员需要对新功能可能涉及到的旧代码有充分的了解。</p>
<h1 id="参考资料">参考资料</h1>
<blockquote>
<p><a href="https://blog.csdn.net/yelong0201/article/details/79643072">Cosmos staking module</a><br>
<a href="https://medium.com/node-a-team/cosmos-hub-security-vulnerability-regarding-redelegation-and-unbonding-e6a2cf03e928">Node A-Team 分析文章 Cosmos Hub Security Vulnerability regarding Redelegation and Unbonding</a><br>
<a href="https://www.chainnews.com/articles/159067316137.htm">Cosmos攻略：Staking 新手实用工具指南</a><br>
<a href="https://blog.csdn.net/weixin_37504041/article/details/100164596">cosmos源码分析之四Staking模块</a><br>
<a href="https://forum.cosmos.network/u/jessysaurusrex/activity/topics">jessysaurusrex 记录的几个cosmos 1day</a><br>
<a href="https://www.jianshu.com/p/0878e5be0546">Cosmos的解绑定漏洞分析</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[合约安全(2) Bancor Network权限配置错误漏洞]]></title>
        <id>https://blog.leepanda.top/post/he-yue-an-quan-2-bancor-network-quan-xian-pei-zhi-cuo-wu-lou-dong/</id>
        <link href="https://blog.leepanda.top/post/he-yue-an-quan-2-bancor-network-quan-xian-pei-zhi-cuo-wu-lou-dong/">
        </link>
        <updated>2021-05-29T10:35:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="abstract">Abstract</h1>
<p>2020年6月16日,BancorV2上线以太坊主网。<br>
2020年6月18日,Bancor Network团队发现了其BancorV2智能合约的安全漏洞。<br>
<img src="https://img-blog.csdnimg.cn/20200706154156887.png" alt="Bancor团队发现漏洞" loading="lazy"><br>
漏洞导致攻击者可盗取Bancor合约用户的资产。<br>
本文将介绍一下攻击的细节和这次安全事件的始末。</p>
<h1 id="漏洞原理">漏洞原理</h1>
<p>本次安全事件一共涉及三个有漏洞的智能合约。</p>
<ul>
<li>0x8dfeb86c7c962577ded19ab2050ac78654fea9f7</li>
<li>0x5f58058C0eC971492166763c8C22632B583F667f</li>
<li>0x923cab01e6a4639664aa64b76396eec0ea7d3a5f</li>
</ul>
<p>三个合约内容相似，都实现了 TokenHandler contract<br>
该合约关键functions如下:<br>
<img src="https://img-blog.csdnimg.cn/20200706155529256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="TokenHandler Fucntions" loading="lazy">可见实现了三个关键函数</p>
<pre><code>safeApprove
safeTransfer
safeTransferFrom
</code></pre>
<p>非预期的是，三个函数的Access Control全都是public，<br>
意味着任何人可以调用该函数来进行转账操作。<br>
攻击者可以调用 safeTransferFrom函数，其中<code>_from</code>设为任何该合约的用户,<code>_to</code>设为攻击者自己的address。从而无限制的将用户的token转移到自己的钱包。</p>
<h3 id="遗留问题">遗留问题</h3>
<p>调用transferFrom时，需要<code>_from</code>用户有足够的<code>allowance</code>,如果<code>_value</code>超过了<code>allowance</code>应该会报错才对。<br>
所以上文中<code>_from</code>可以设置的用户，必须有调用过approve函数来批准合约操作自己的token。</p>
<h1 id="rescue">rescue</h1>
<p>Bancor Network Team 发现漏洞后，立刻利用该漏洞，将所有用户的token向BancorNetwork安全账户转移。抢在被恶意攻击之前，将合约中的token掏空。<br>
对应的Transaction如下</p>
<ul>
<li>0xc8021b971e69e60c5deede19528b33dcd52cdbd8</li>
<li>0x14fa61fd261ab950b9ce07685180a9555ab5d665</li>
</ul>
<p>我们使用在线工具<a href="https://oko.palkeo.com/0xdba03739b4a29594fd3c89881caffa1862ce4bd630ed5f849b9f22707332e59e/">OKO Contract Explorer</a>来分析一下<br>
发现Transaction 中主要调用了 balanceOf 、 allowance 和 safeTransforFrom三个函数<br>
其中SafeTransforFrom就是刚才提到的漏洞函数<br>
<img src="https://img-blog.csdnimg.cn/20200706164538338.png" alt="SafeTransforFrom" loading="lazy"><br>
balanceOf和allowance用来查看当前token数量，和<code>_spender</code>可以操作的Token数量<br>
<img src="https://img-blog.csdnimg.cn/20200706164426478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="balanceOf和allowance" loading="lazy"><br>
奇怪的是，每次调用allowance，返回的结果都极大。<br>
如图中，0x8dfe居然Approve了<code>0xfffffffffffffffffffffffffffffffffffffffffffffecf2ccab1d2176d6ebb</code>这么多的DATA<br>
DATA的总发行量也没有这么多呀<br>
结合Bancor Network 官方Twitter的描述:<br>
<img src="https://img-blog.csdnimg.cn/20200706171247966.png" alt="Given Approvals" loading="lazy"><br>
我们猜测是BancorV2用户为了操作方便，直接进行了infinite approve.<br>
这也就解释了上文中的allowance超额的问题。</p>
<h1 id="discussion">Discussion</h1>
<p>综上所述，上线仅一天的BancorV2,由于函数的Access Control存在问题，存在盗笔风险。<br>
受该漏洞影响的token总价值为$409,656。<br>
另一方面，从代码审计的角度来讲，Access Control Setting Error是很简单很好理解的漏洞。<br>
为了Defi应用的安全，项目上线之前还是请安全团队来进行一次代码审计吧</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[合约安全(1) Balancer中通货紧缩货币的套利攻击详解]]></title>
        <id>https://blog.leepanda.top/post/he-yue-an-quan-1balancer-zhong-tong-huo-jin-suo-huo-bi-de-tao-li-gong-ji-xiang-jie/</id>
        <link href="https://blog.leepanda.top/post/he-yue-an-quan-1balancer-zhong-tong-huo-jin-suo-huo-bi-de-tao-li-gong-ji-xiang-jie/">
        </link>
        <updated>2021-05-29T10:32:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="abstract">Abstract</h1>
<p>消息来源：2020.6.29 链闻看天下<br>
<a href="https://www.chainnews.com/articles/961746731123.htm">当红流动性挖矿 DeFi 项目 Balancer 如何被攻击？官方这么说</a><br>
文中简要描述了攻击发生时间和危害，没有详细描述漏洞细节。</p>
<p>漏洞详细介绍可参考文章<a href="https://medium.com/@1inch.exchange/balancer-hack-2020-a8f7131c980e">《Balancer Pool with STA Deflationary Token Incident》</a></p>
<h1 id="概念介绍">概念介绍</h1>
<h3 id="滑点-slippage">滑点 slippage</h3>
<p>在买卖 token 时，期望的交易价格和实际支付的价格之间的差别，称之为交易滑点。</p>
<h3 id="流通池">流通池</h3>
<p>用户将资产转入交易平台之中获得收益，而在平台中的总资产额度，就构成了流通池。<br>
流通池中代币总额越多，深度越好，大额交易带来的影响也就更小，不至于因为一笔几十万美元的交易就让价格产生大幅波动。<br>
Defi的一个风险点就是流通池不够大，容易产生较大滑点。</p>
<h3 id="流动性挖矿-liquidity-mining">流动性挖矿 liquidity mining</h3>
<p>用户将自己的token放到交易所的流通池中，交易所则将等值的交易所代币发放给用户。<br>
这样一来，用户为交易所提供了流通池的部分深度。同时，用户可以享受交易所挖矿带来的分红。</p>
<h3 id="自动化做市商-amm">自动化做市商 AMM</h3>
<p>AMM是一种即时兑换模式。<br>
通常的交易所(中心化/去中心化)，需要买卖双方对价格达成一致，才能完成交易；而AMM 只需买方认可流通池中的token价格即可完成交易。</p>
<pre><code>类比到游戏当中，就是玩家交易所 和 游戏NPC商人的区别。
在玩家交易所中，需要买方玩家的出价 和 卖方的出价一致，才能达成交易。 这需要双方的互动。
在游戏NPC商人中，无论是买方还是卖方，玩家只需要认可NPC给出的一口价，就可以完成交易。(例如把打怪获得的装备卖给武器商人，多少钱武器商人说了算，没有回旋余地)至于NPC给出的价格，则是按照游戏中的规则，对武器进行估值（蓝色装备10金币，紫色装备100金币等）
AMM就是这样一个武器商人，他会按照既定规则对token进行估值，并跟用户进行即时交易。
</code></pre>
<h3 id="uniswap">Uniswap</h3>
<p>Uniswap 就是一个AMM实例，官网是 : <a href="https://uniswap.exchange">https://uniswap.exchange</a><br>
Uniswap 采取的算法为固定乘积的方式 : 可以用方程式 X * Y= K 来表示。这里，K 是个常数。<br>
假设有这样一个交易池，其中有 50 个以太坊，有 1 万美元，而 K 的值恒定，为 1 万。<br>
假设 X 表示以太坊的供应量 50， Y 是 ETH 交易时的价格。<br>
在这种情况下，Y 的价格会是 10,000/50 = 200， 因为 K = 10000 是个常数值。<br>
如果有人购买了以太坊，交易池子中的以太坊会减少，而美元的总量会增加。</p>
<ul>
<li>假设用户用 200 美元的价格，购买了 2 个以太坊。X 变为 48，Y 变成 10000/48 = 208 元。</li>
<li>假设用户出售 7 个以太坊，X 变为 55 。Y  变成 10000/55 = 181 美元。</li>
</ul>
<h3 id="通缩货币模型">通缩货币模型</h3>
<p>即被设计成&quot;越用越少&quot;的token。<br>
举例如下</p>
<pre><code>func token.Transfor(from,to,Amount):
	from.Amount -= Amount
	to.Amount += ( Amount - 1ETH )
</code></pre>
<p>当from把10000 ETH 转给 to时，from虽然减少了10000 个 ETH，但是 to 只收到了9999个 ETH。这就导致token总量越来越少。<br>
实现了货币的通缩。</p>
<h1 id="攻击过程">攻击过程</h1>
<p>攻击对应的transaction是<a href="https://etherscan.io/tx/0x013be97768b702fe8eccef1a40544d5ecb3c1961ad5f87fee4d16fdc08c78106">https://etherscan.io/tx/0x013be97768b702fe8eccef1a40544d5ecb3c1961ad5f87fee4d16fdc08c78106</a></p>
<p>其中Token Transfer如下：<br>
<img src="https://img-blog.csdnimg.cn/20200705132655398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="交易内容如下" loading="lazy"><br>
etherscan自带的explorer不太好看细节，这里推荐使用<a href="https://oko.palkeo.com/0x013be97768b702fe8eccef1a40544d5ecb3c1961ad5f87fee4d16fdc08c78106/">OKO contract explorer</a><br>
界面如下，可以看到函数调用顺序<br>
<img src="https://img-blog.csdnimg.cn/2020070513444497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="Call Tree" loading="lazy"></p>
<h3 id="step1-flash-loan-借钱搞事">Step1 flash loan 借钱搞事</h3>
<p>Defi相关攻击中，有部分攻击是需要资金成本的。闪电贷的出现，使这种资金成本不再是攻击者的障碍。</p>
<ul>
<li>我们看到Transaction首先调用了两次approve函数，来批准 WETH9和STA 代理用户转账。<br>
<img src="https://img-blog.csdnimg.cn/202007051344102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="approve" loading="lazy"></li>
<li>接着是一记operate函数，从dYdX进行闪电贷。一共借了104331.302778 × 10¹⁸ WETH<br>
<img src="https://img-blog.csdnimg.cn/20200705142758939.png" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<h3 id="step2-用weth换sta使sta数量减少并升值">Step2 用WETH换STA，使STA数量减少，并升值。</h3>
<ul>
<li>然后攻击者分多次调用 swapExactAmountln函数，将借来的WETH换成STA。<br>
<img src="https://img-blog.csdnimg.cn/20200705142937700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="swapExactAmountln" loading="lazy"><br>
这里注意，由于STA是通货紧缩模型货币。上述swapExactAmountln函数发生时，流通池中的STA总数回减少，攻击者得到的STA也减少了，收到的STA的总数量是小于WETH数量除以两者价值比的。<br>
数量的下降，导致了STA单价上升(因为Uniswap中的K值不变，数量少则单价升高)。</li>
</ul>
<h3 id="step3-用sta换weth配合gulp函数获得额外weth">Step3 用STA换WETH，配合gulp函数，获得额外WETH。</h3>
<ul>
<li>最后，攻击者多次先后调用  swapExactAmountln 和 gulp函数，将STA换回WETH。<br>
<img src="https://img-blog.csdnimg.cn/20200705152219583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
这里注意，如果没有配合gulp使用，STA的单价会随着swapExactAmountln的调用，越来越低。<br>
到最后STA单价会低到攻击者无法获利，不过是把WETH换成了STA，然后又换了回来。<br>
我们看一下gulp函数的定义。</li>
</ul>
<pre><code>function gulp(address token)
        external
        _logs_
        _lock_
    {
        require(_records[token].bound, &quot;ERR_NOT_BOUND&quot;);
        _records[token].balance = IERC20(token).balanceOf(address(this));
    }
</code></pre>
<p>可见gulp是对STA单价进行一个校准，校准函数是ERC20的balanceOf。而不是用的当前流通池中预期的价格。<br>
所以，这里会产生一个偏差，STA的单价会被固定在高位。不会随着swapExactAmountln的调用而减少。</p>
<h3 id="step4-还清flash-loan贷款套利离开">Step4 还清flash loan贷款，套利离开</h3>
<ul>
<li>最终，攻击者得到了超量的WETH，并向dYdX归还了借来的104331.302778 × 10¹⁸ WETH<br>
<img src="https://img-blog.csdnimg.cn/20200705162120151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="还钱" loading="lazy"><br>
并取出利润。<br>
<img src="https://img-blog.csdnimg.cn/20200705162354515.png" alt="拿钱走人" loading="lazy"></li>
</ul>
<h1 id="discussion">Discussion</h1>
<p>攻击发生在2020年6月29日，造成了50w美元的损失。6月30日，balancer Labs宣布已经奖励了Bug finder Hex_Capital。并将会为所有funder报销整个攻击事件中的所有损失。</p>
<h1 id="references">References</h1>
<ul>
<li>攻击交易详情 https://oko.palkeo.com/0x013be97768b702fe8eccef1a40544d5ecb3c1961ad5f87fee4d16fdc08c78106/</li>
<li>攻击事件记录 https://medium.com/@1inch.exchange/balancer-hack-2020-a8f7131c980e</li>
<li>balancer 官方twitter https://twitter.com/BalancerLabs</li>
<li>ERC20智能合约实现代码 https://zhuanlan.zhihu.com/p/104527883</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[以太坊细节-消息机制]]></title>
        <id>https://blog.leepanda.top/post/yi-tai-fang-xi-jie-xiao-xi-ji-zhi/</id>
        <link href="https://blog.leepanda.top/post/yi-tai-fang-xi-jie-xiao-xi-ji-zhi/">
        </link>
        <updated>2021-05-29T10:18:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>研究公链中msg互相触发关系，学习一下以太坊中消息广播的逻辑顺序。<br>
带宽要求和消息转发之间有没有相对关系。</p>
<blockquote>
<p>消息监听机制 handleMsg: server,client,ProtocolManager<br>
消息广播机制 broadcast: transaction,block,blockHash</p>
</blockquote>
<h2 id="寻找转发点">寻找转发点</h2>
<p>找msg的监听循环，代码中类似handleMsg之类的函数</p>
<h3 id="protocolmanagerhandemsg-中的转发逻辑">ProtocolManager.handeMsg 中的转发逻辑</h3>
<p>在ProtocolManager.handleMsg中把所有消息的触发关系梳理了一遍。<br>
内容如下<br>
<img src="https://blog.leepanda.top/post-images/1622283633054.png" alt="" loading="lazy"></p>
<h4 id="举例-getblockheadersmsg">举例 GetBlockHeadersMsg</h4>
<p>在共识过程中，如果节点收到了区块头的消息。<br>
会触发消息监听中的GetBlockHeadersMsg事件。<br>
代码如下<br>
handler.go line386</p>
<pre><code>case msg.Code == GetBlockHeadersMsg:
        ...
        if err := msg.Decode(&amp;query); err != nil {
			return errResp(ErrDecode, &quot;%v: %v&quot;, msg, err)
		}
        ...
return p.SendBlockHeaders(headers)
</code></pre>
<p>其中<code>peer.SendBlockHeaders</code>函数的定义如下</p>
<pre><code>func (p *peer) SendBlockHeaders(headers []*types.Header) error {
	return p2p.Send(p.rw, BlockHeadersMsg, headers)
}
</code></pre>
<p>emmmm，就是简单地把区块头广播出去。</p>
<p>在return之前还有一个返回点</p>
<pre><code>if err := msg.Decode(&amp;query); err != nil {
			return errResp(ErrDecode, &quot;%v: %v&quot;, msg, err)
		}
</code></pre>
<p>可见节点收到的区块头会被广播出去的条件是msg要能够正常的Decode.</p>
<p>其他msg分析过程同上。</p>
<h3 id="serverhandlerhandlemsg">serverHandler.handleMsg</h3>
<p>serverHandler的监听中，所有消息触发情况如下图。<br>
<img src="https://blog.leepanda.top/post-images/1622283858463.png" alt="" loading="lazy"></p>
<p><s>哭了，没有消息闭环。</s></p>
<h3 id="clienthandlerhandlemsg">clientHandler.handleMsg</h3>
<p>clientHandler的监听，作用是对Server返回的结果进行对应的处理<br>
收到的消息及其对应关系如下。<br>
<img src="https://blog.leepanda.top/post-images/1622283887920.png" alt="" loading="lazy"></p>
<h2 id="寻找广播点">寻找广播点</h2>
<p>广播的底层在于peer类的boardcast函数</p>
<pre><code>func (p *peer) broadcast() {
	for {
		select {
		case txs := &lt;-p.queuedTxs:
			if err := p.SendTransactions(txs); err != nil {
				return
			}
			p.Log().Trace(&quot;Broadcast transactions&quot;, &quot;count&quot;, len(txs))

		case prop := &lt;-p.queuedProps:
			if err := p.SendNewBlock(prop.block, prop.td); err != nil {
				return
			}
			p.Log().Trace(&quot;Propagated block&quot;, &quot;number&quot;, prop.block.Number(), &quot;hash&quot;, prop.block.Hash(), &quot;td&quot;, prop.td)

		case block := &lt;-p.queuedAnns:
			if err := p.SendNewBlockHashes([]common.Hash{block.Hash()}, []uint64{block.NumberU64()}); err != nil {
				return
			}
			p.Log().Trace(&quot;Announced block&quot;, &quot;number&quot;, block.Number(), &quot;hash&quot;, block.Hash())

		case &lt;-p.term:
			return
		}
	}
}
</code></pre>
<p><s>emmmmmmm 为啥刚才没搜到</s></p>
<p>三个channel用于广播</p>
<p>p.queuedProps 广播块<br>
p.queuedAnns 广播哈希<br>
p.queuedTxs 广播交易</p>
<h3 id="广播交易-广播哈希">广播交易 广播哈希</h3>
<p>当节点自己挖到block时<br>
w.mux.Post(core.NewMinedBlockEvent{Block: block})<br>
其中会在本地生成NewMinedBlockEvent事件<br>
该事件触发minedBroadcastLoop循环</p>
<pre><code>		if ev, ok := obj.Data.(core.NewMinedBlockEvent); ok {
			pm.BroadcastBlock(ev.Block, true)  // First propagate block to peers
			pm.BroadcastBlock(ev.Block, false) // Only then announce to the rest
		}
</code></pre>
<p>其中BroadcastBlock函数根据第二个参数，选择广播整个区块还是只广播区块的hash</p>
<h3 id="交易广播">交易广播</h3>
<p>广播交易监听txBroadcastLoop循环</p>
<pre><code>select {
		case event := &lt;-pm.txsCh:
			pm.BroadcastTxs(event.Txs)
</code></pre>
<p>触发广播需要pm.txsCh<br>
<s>然而没找到这个信道的赋值在哪</s></p>
<h2 id="带宽消耗">带宽消耗</h2>
<h3 id="文献描述">文献描述</h3>
<p>试图从以太坊的白皮书中找到对带宽的描述<br>
https://github.com/ethereum/wiki/wiki/[中文]-以太坊白皮书<br>
但是并没有相关内容<br>
更多是在描述原理</p>
<p>查到了bitmex网，这里有一些对节点性能的测量标准。<br>
BitMEX 研究推出以太坊节点指标网站——Nodestats.org</p>
<p>https://blog.bitmex.com/zh_cn-bitmex-research-launches-ethereum-node-monitoring-website-nodestats-org/</p>
<p>从中我们可以找到一些geth的节点带宽要求<br>
<img src="https://blog.leepanda.top/post-images/1622284074484.png" alt="" loading="lazy"></p>
<p>Geth的上行带宽 要求 4kb/s<br>
Geth的下行带宽 要求 60kb/s</p>
<h3 id="代码中的限制">代码中的限制</h3>
<p>rlpx.go line603</p>
<pre><code>if fsize &gt; maxUint24 {
</code></pre>
<p>每个msg最大256byte。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我要内卷]]></title>
        <id>https://blog.leepanda.top/post/xuan-ze-nei-juan/</id>
        <link href="https://blog.leepanda.top/post/xuan-ze-nei-juan/">
        </link>
        <updated>2021-05-09T15:07:25.000Z</updated>
        <content type="html"><![CDATA[<p>我之前困惑的不能算是 “职业生涯规划” 而是 “懒惰和欲望的矛盾”<br>
随着时间发展，清心寡欲的我，必然面对越来越多的刚需欲望。<br>
车子、房子、父母的养老钱。<br>
我的生活开销，枸杞茶。</p>
<p>我错误的以为，工作时间越久，我的价值越高，工资越高<br>
但是对于大多数工程师而言，刚入职的那一刻，或许是工资最高的时候。<br>
未来，可能会越来越难<br>
身上的担子可能会越来越重。我的收入 不涨就是下降。<br>
别被知乎里面 宣传 人生无须努力的论调洗了脑</p>
<p>趁着我的身体还苟的住，<br>
多积累一些资产。</p>
<p>让未来的自己能轻松一些，有更多的选择空间。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[太阳和冥王星应该互相包容]]></title>
        <id>https://blog.leepanda.top/post/tai-yang-he-ming-wang-xing-ying-gai-hu-xiang-bao-rong/</id>
        <link href="https://blog.leepanda.top/post/tai-yang-he-ming-wang-xing-ying-gai-hu-xiang-bao-rong/">
        </link>
        <updated>2021-04-29T00:58:41.000Z</updated>
        <content type="html"><![CDATA[<p>看到个令人心酸的小故事：<br>
一个小伙子，家境一般，母亲在KTV做工，父亲是一名流水线工人。</p>
<p>他有理想，满怀热血，积极参加各种校园活动，做的都很好。<br>
他的诗朗诵震慑人心，听众都被他的真诚打动。<br>
他以相当高的分数报考了理想大学的核物理专业。去实现他的梦想&quot;再造它一个太阳出来！&quot;</p>
<p>但上了大学之后，事情有一点吃力。<br>
他适应不了宿舍生活，但也没钱租房。<br>
他被同学们当做异类排挤<br>
就算是所谓的朋友也道一声“不好意思，我实在受够你了”然后告辞。<br>
他仍然积极参加校园活动，到处当志愿者。但却积劳成疾，落下病根，最终休学。</p>
<p>后来，他跳河了<br>
他接受不了失败的自己，啥也干不成<br>
<img src="https://blog.leepanda.top/post-images/1619660197553.jpg" alt="" loading="lazy"></p>
<h3 id="有理想是好的">有理想是好的</h3>
<p>我喜欢这些有理想的人，他们有着为了理想舍弃生命的勇气。人类的赞歌是勇气的赞歌。<br>
比如要成为海贼王的<code>路飞</code>、为了替老妈报仇，去跟DIO拼命的<code>JOJO</code>、不胜利毋宁死的<code>加尔鲁什</code>。<br>
<img src="https://blog.leepanda.top/post-images/1619663403081.png" alt="" loading="lazy"><br>
比如雷军 愿你出走半生，归来仍是少年。<br>
比如我女朋友，她为了做出真正有意义的毕设，做出能推动行业向前发展的研究成果，天天熬夜，没有真正完全放松的周末。<br>
比如大一大二的我，&quot;学校给我放双休，但人生没有假期。叫醒我的不是闹钟，而是梦想&quot;。作为一个人生目标流，寻找生命的意义的选手。我几乎不需要休息。</p>
<p>这种有主观能动性的存在是很好的，他们可以创造更多的价值。<br>
姜文称赞彭于晏时，评价他&quot;可以把灵与肉分离开&quot;。大脑完全支配身体，不受肉欲的阻挠。</p>
<h3 id="没有理想也是好的">没有理想也是好的</h3>
<p>天津方言称那些 理想高于能力的人，&quot;想瞎了心了&quot;<br>
高中的语文老师说&quot;上班别跟我谈理想，我的理想就是不上班&quot;<br>
历史老师教导我&quot;这么好的天气，上什么班啊...咱应该找个草坪，把衣服铺上面，往上一躺，多好。&quot;<br>
大家对996的抨击，反应了很多人 也不想那么辛苦。</p>
<p>我不想努力了 我不想天天狼性思维了 累了<br>
一位拉比(Dr. Abraham Twerski)说 &quot;生命没有意义是一件很幸运的事，对嘛，你就活着就行了。就这么活着就行了。&quot;</p>
<p>灵体顺肉体的自然才是常态，<br>
人生快乐小技巧：别推敲习惯。</p>
<h3 id="太阳是好的">太阳是好的</h3>
<p>&quot;高情商&quot;寓言故事：&quot;你是愿意当一颗土鸡蛋，被热水改变。还是愿意当一个咖啡豆，改变环境。&quot;<br>
从小我们被教育要做人上人<br>
我们希望自己能控制别人，利用别人。我们希望自己如帝王一样御人。<br>
我们希望自己有资格教别人做人，对自己看不惯的行为批斗一番。<br>
我们希望自己能改造别人、就像改造客观环境一样。<br>
我们希望自己像红太阳一样，引领别人，为迷茫的年轻人指路。</p>
<p>理科生、研究员、工程师通过改变客观世界，创造价值。<br>
文科生、作者、辩手通过改变理科生创造价值。<br>
人文学科的学者们世世代代研究的东西，毛爷爷禁止我们学的东西。有超强的力量。</p>
<blockquote>
<p>我不在乎你怎么看我，但是我要你学会怎么跟我说话，怎么做人做事。<br>
<img src="https://blog.leepanda.top/post-images/1619666141161.jpg" alt="" loading="lazy"><br>
不断变强，质量像太阳一样庞大，让世界围着自己转。</p>
</blockquote>
<h3 id="冥王星也是好的">冥王星也是好的</h3>
<p>辐射别人会让别人不开心，大家都是独立的人。<br>
普信男好为人师，会令人作呕。<br>
<img src="https://blog.leepanda.top/post-images/1619666851869.jpg" alt="" loading="lazy"><br>
环保女政治正确，也会让人很累。</p>
<p>我更在乎快乐。<br>
那些不是明星，不教导，不批评别人的人们。我也超爱，跟他们在一起很舒服。<br>
<img src="https://blog.leepanda.top/post-images/1619667327030.png" alt="" loading="lazy"></p>
<blockquote>
<p>不过哭声大的孩子有奶吃...&quot;懂事&quot;的宝宝得不到太阳人那么多的社会资源</p>
</blockquote>
<h3 id="总结">总结</h3>
<p>世界并非离散的。<br>
大家都处在 太阳和冥王星限定的连续区间里，拼命努力和懒懒散散的区间里。<br>
都是很好的</p>
<p>只是我个人偏好吧。<br>
因为我已经过的很舒适了，不想继续努力了。<br>
所以希望身边少一些太阳，多一些安静的冥王星。<br>
我也是冥王星，我不会恶心你们的。安啦。</p>
<h3 id="ps">PS</h3>
<p>啊， 举文章开头的那个案例<br>
是因为<br>
那个小哥哥试图像高中诗朗诵那样影响大学同学，但其实也是个普通人。<br>
作为普信男的他，被身边的人排挤了。<br>
所以觉得很符合题意。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[青椒虾仁+香菇猪肉]]></title>
        <id>https://blog.leepanda.top/post/qing-jiao-xia-ren-xiang-gu-zhu-rou/</id>
        <link href="https://blog.leepanda.top/post/qing-jiao-xia-ren-xiang-gu-zhu-rou/">
        </link>
        <updated>2021-04-25T14:22:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="香菇猪肉">香菇猪肉</h3>
<ul>
<li>猪肉切片
<ul>
<li>装入碗中</li>
<li>加入生抽、料酒、胡椒粉、辣椒粉、油?</li>
<li>揉捏 至 搅拌均匀</li>
</ul>
</li>
<li>开始热锅
<ul>
<li>倒油</li>
<li>等油烧热 倒入猪肉</li>
<li>等猪肉熟了 倒入葱姜蒜</li>
<li>炒一会 倒入蘑菇</li>
<li>炒一会 出锅</li>
</ul>
</li>
</ul>
<h3 id="青椒虾仁">青椒虾仁</h3>
<ul>
<li>虾仁剥皮
<ul>
<li>装入碗中</li>
<li>加入 胡椒粉、生粉、生抽</li>
<li>揉捏 至 搅拌均匀</li>
</ul>
</li>
<li>热锅
<ul>
<li>热油</li>
<li>倒入虾仁 炒红后捞出</li>
</ul>
</li>
<li>葱姜蒜 炝锅
<ul>
<li>倒入青椒</li>
<li>炒一会</li>
<li>倒入虾仁</li>
<li>翻炒一会 出锅</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[巧克力雪糕菜谱]]></title>
        <id>https://blog.leepanda.top/post/qiao-ke-li-xue-gao-cai-pu/</id>
        <link href="https://blog.leepanda.top/post/qiao-ke-li-xue-gao-cai-pu/">
        </link>
        <updated>2021-04-25T13:08:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="食材">食材</h3>
<ul>
<li>淡奶油 500 g</li>
<li>炼乳 170 g</li>
<li>可可粉 80 g</li>
</ul>
<h3 id="步骤">步骤</h3>
<ol>
<li>淡奶油打发</li>
<li>倒入炼乳 和 可可粉</li>
<li>搅拌均匀<br>
<img src="https://blog.leepanda.top/post-images/1619356338657.jpg" alt="" loading="lazy"></li>
<li>抹平冷冻4个小时<br>
<img src="https://blog.leepanda.top/post-images/1619356349338.jpg" alt="" loading="lazy"></li>
</ol>
<h3 id="最终效果">最终效果</h3>
<figure data-type="image" tabindex="1"><img src="https://blog.leepanda.top/post-images/1619356357470.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[按摩]]></title>
        <id>https://blog.leepanda.top/post/an-mo/</id>
        <link href="https://blog.leepanda.top/post/an-mo/">
        </link>
        <updated>2021-04-22T09:56:00.000Z</updated>
        <content type="html"><![CDATA[<p>老妈给我按摩后背的时候，肌肉真的有得到放松。<br>
经过实践，按摩不像其他传统养生节目。<br>
它真的有明显的功效。</p>
<h3 id="颈部">颈部</h3>
<ul>
<li>
<p>捏颈椎<br>
这个动作没有固定的穴位，但是还挺舒服。<br>
定义喉结方向为前方。<br>
拇指和四指夹住脖子后方中部的肌肉(在皮肤下面有一块硬硬的东西，应该是肌肉吧大概)。<br>
从风池穴向下，大约八厘米的范围，都是可以捏的。<br>
离散用力，约50下。<br>
<img src="https://blog.leepanda.top/post-images/1619085443636.png" alt="捏颈椎" loading="lazy"></p>
</li>
<li>
<p>风池穴<br>
眼睛保健操倒数第三节。<br>
和捏脊椎不同的是，这一步的用力要适中。<br>
用力不能离散，要连续用力，保持恬静。<br>
按揉个50圈即可</p>
</li>
<li>
<p>天牖穴<br>
在风池穴下面，ge这儿呢<br>
<img src="https://blog.leepanda.top/post-images/1619085466467.png" alt="天牖穴" loading="lazy"><br>
与风池穴相同，连续按揉，保持恬静。<br>
同样按揉50圈</p>
</li>
</ul>
<h3 id="肩膀">肩膀</h3>
<ul>
<li>
<p>肩井<br>
肩井的位置在脖子和肩膀的折角处。<br>
<img src="https://blog.leepanda.top/post-images/1619085494025.png" alt="肩井穴" loading="lazy"><br>
离散用力，按揉到爽。<br>
（大概按揉个30次左右，手就会酸。按累了就歇歇..）</p>
</li>
<li>
<p>天宗<br>
天宗的位置在肩井的下面<br>
<img src="https://blog.leepanda.top/post-images/1619085516123.png" alt="天宗" loading="lazy"><br>
离散用力，力度要强。<br>
由于按揉肩井的时候，手已经按酸了。<br>
这里可以改用肘。<br>
不要将全身的重量都压在上面，受害者会死于非命。</p>
</li>
<li>
<p>肩膀上缘<br>
就是给爸爸妈妈锤肩的那个地方<br>
力度同样要大一些。<br>
手不累了就用手按，如果还累可以用小臂。<br>
<img src="https://blog.leepanda.top/post-images/1619085541281.png" alt="肩膀上缘" loading="lazy"></p>
</li>
</ul>
<h3 id="后背">后背</h3>
<ul>
<li>
<p>双指刮刮乐<br>
用双手食指和中指的第一关节，自上而下，用力划过脊柱两侧。<br>
<img src="https://blog.leepanda.top/post-images/1619085559662.png" alt="双指刮刮乐" loading="lazy"><br>
这个过程要用力一些。<br>
可以刮它30个来回。</p>
</li>
<li>
<p>手刀敲敲乐<br>
杨慧兰的8层手刀，同样在脊柱两侧用力<br>
<img src="https://blog.leepanda.top/post-images/1619085584911.png" alt="手刀敲敲乐" loading="lazy"><br>
轻轻的敲即可，手刀仅使用1成功力。<br>
沿着脊柱，来回往复。<br>
来10个来回放松一下即可。</p>
</li>
<li>
<p>撸脊椎<br>
单手，力度适中<br>
沿着脊柱，自上而下。刨。<br>
单回合路径越长，受害人越爽。<br>
建议从脑袋壳子一口气撸到尾(yǐ)巴骨。<br>
来30次单程。</p>
</li>
</ul>
<h3 id="结尾">结尾</h3>
<p>一整套流程走完后，不要问受害者感觉如何。<br>
如果他觉得爽，那他现在只想睡觉。<br>
帮他盖好被子，拉上窗帘，就可以安静的溜了。<br>
（ 被子盖过头，道一声 阿门 ）<br>
<img src="https://blog.leepanda.top/post-images/1619085605044.png" alt="水啦" loading="lazy"></p>
]]></content>
    </entry>
</feed>