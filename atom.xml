<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://pandatea.life</id>
    <title>PandaTea</title>
    <updated>2021-07-19T16:26:43.632Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://pandatea.life"/>
    <link rel="self" href="https://pandatea.life/atom.xml"/>
    <subtitle>一个贫穷的黑魔法师，一事无成，但朋友们爱我。</subtitle>
    <logo>https://pandatea.life/images/avatar.png</logo>
    <icon>https://pandatea.life/favicon.ico</icon>
    <rights>All rights reserved 2021, PandaTea</rights>
    <entry>
        <title type="html"><![CDATA[见闻周记[3]]]></title>
        <id>https://pandatea.life/post/jian-wen-zhou-ji-3/</id>
        <link href="https://pandatea.life/post/jian-wen-zhou-ji-3/">
        </link>
        <updated>2021-07-19T06:15:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="有钱人有什么不一样"><a href="https://book.douban.com/subject/33447341/">《有钱人有什么不一样》</a></h1>
<p><a href="http://keithcameronsmith.com">基斯·卡麦隆·史密斯</a>本职工作就是金融演说家。这本书看起来会有点像财商鸡汤。<br>
文中反复强调的是6个内容；</p>
<ul>
<li>有钱人会做一些长远规划</li>
<li>谈论想法、How 而非 人物的品格八卦等。</li>
<li>多用赞美、积极的词语。
<ul>
<li>多用我要、我想搞一个xxx 的语式，而非 我应该 我被迫 我别无选择...</li>
<li>多以生命将逝的心态去思考。（ 干，我明天如果就要死了，那我现在不去整一个NFT发卡平台就会很亏</li>
</ul>
</li>
<li>书籍和导师的力量
<ul>
<li>这一点 <a href="https://www.geekonomics10000.com">万维钢老师</a>的《学习究竟是什么》也有讲。大学中提供的主要是书籍，这种知识。但是有及时反馈的训练还是需要有导师监控。</li>
</ul>
</li>
<li>一些比钱更重要的事情
<ul>
<li>人际关系的和睦，你的好朋友、家人跟你在一起不会觉得膈应</li>
<li>自由地创作和输出</li>
<li>自由本身</li>
</ul>
</li>
<li>要想摆脱激烈的竞争，唯一的方法就是冒险。
<ul>
<li>克服恐惧， 对于成功的欲望 大于 被认可的欲望</li>
</ul>
</li>
</ul>
<h1 id="clash"><a href="https://github.com/Dreamacro/clash/releases/">Clash</a> Linux科学上网</h1>
<p>为了给树莓派改善一下网速，连上了公司的EAP-TLS 认证的办公网。<br>
之前在arm64的VPS上翻墙的时候使用ssr就很顺利。可能是换成了Aarch64，很多client运行不了。<br>
于是换成了<a href="https://github.com/Dreamacro/clash/releases/">Clash</a>走V2ray Server来翻墙。麻烦的一批。<br>
还把隔壁空工位的显示器拿来用了一下。三个显示器体验极好。<br>
<img src="https://pandatea.life/post-images/1626704613683.jpg" alt="" loading="lazy"></p>
<h1 id="hexo-blog-encrypt"><a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo blog encrypt</a></h1>
<p>前几天还在跟少华涛涛吐槽一个通过前端加密文章来收钱的博客。<br>
如今遇到了一个使blog文章加密的小组件，好神奇。有空追追代码...希望不是简单的把密码发给后台校验balabala。<br>
<img src="https://pandatea.life/post-images/1626704643767.jpg" alt="" loading="lazy"></p>
<h1 id="蜜猿"><a href="https://www.cryptape.com">蜜猿</a>冷钱包解剖</h1>
<p><a href="https://www.cryptape.com">蜜猿科技</a>很久以前送给<a href="http://xhyumiracle.com/">首席</a>一个小摆件。<br>
<img src="https://pandatea.life/post-images/1626704670706.jpg" alt="" loading="lazy"><br>
据说这是一个冷钱包，里面有Nervos的CKB空投。而且钱还在里面。<br>
经过对小猴子的一通肢解，得到了其本质 <code>Cryptape Cipher v2.2</code><br>
<img src="https://pandatea.life/post-images/1626704697439.jpg" alt="" loading="lazy"><br>
<code>Type-C</code>接口转了一个 <code>Nano Card</code> 槽位。Adapter是Nano Sim Card 那种7个触头的6PIN socket接口。<br>
<img src="https://pandatea.life/post-images/1626680206797.png" alt="" loading="lazy"></p>
<p>一开始我盲猜这张卡是HUAWEI的 <code>Name Memory Card</code><br>
但是连接到电脑之后<code>lsusb</code>没有任何变化，也检测不到卡片插入。<br>
另一种可能是 <code>Nano SIM Card</code>，我问了下移动组的一峰师傅，他说这可能是物联网卡。那应该确认了是<code>Nano SIM Card</code>。</p>
<p>本来想用<a href="https://github.com/yisraeldov/pySimReader-Serial-src-v2">PySIMReader库</a> 来读一下SIM卡内容。<br>
玩儿到一半难受得一批，难道我还得先读一遍《通信原理》吗？<br>
还好Nervos社区的<a href="https://talk.nervos.org/u/stwith/summary">史迪仔</a>老师及时出现制止了我...<br>
Nervos社区之前是有Cryptape Chiper使用教程的，想要连接这个冷钱包，需要一个激活码...<br>
然而相关帖子都已经删了，秘猿官网也找不到Cipher了。初始化应该是很难了....</p>
<p>这两天要是有空，继续追一下pySimReader这条思路。</p>
<h1 id="bash-base64">Bash Base64</h1>
<p>这两天在复现<a href="https://zhuanlan.zhihu.com/p/33532884">JBoss 12149</a>的时候，发现自己去Base64编码shell的结果是不能执行的。后来才发现Runtime.exec需要大括号来搂住<code>argv[0]</code>和<code>argv[1]</code>。<br>
于是自己本地执行 如果是这个亚子</p>
<pre><code class="language-sh">bash -c echo,dG91Y2ggdGVzdA== | base64 , -d | bash -i
</code></pre>
<p>JBoss那边收到的String 需要是这个亚子</p>
<pre><code class="language-sh">bash -c {echo,dG91Y2ggdGVzdA==}|{base64,-d}|{bash,-i}
</code></pre>
<p>全自动编码加大括号脚本<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">链接</a><br>
Java 所有库 Source Code 查询<a href="http://www.docjar.com/">链接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[见闻周记[2]]]></title>
        <id>https://pandatea.life/post/jian-wen-zhou-ji-2/</id>
        <link href="https://pandatea.life/post/jian-wen-zhou-ji-2/">
        </link>
        <updated>2021-07-12T03:49:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="godwoken"><a href="https://github.com/nervosnetwork/godwoken">Godwoken</a></h1>
<p>Nervos CKB作为一条UTXO模型的公链，开发对于某些需要<code>世界状态</code>的Dapp项目不友好。<br>
Godwoken作为CKB的扩容方案，提供了一个账户模型的Layer2网络。减小了Nervos的开发难度。<br>
<img src="https://pandatea.life/post-images/1626062532832.png" alt="" loading="lazy"></p>
<h1 id="zzj的同态加密">ZZJ的同态加密</h1>
<figure data-type="image" tabindex="1"><img src="https://user-images.githubusercontent.com/29042336/124884652-119ea500-e005-11eb-9515-dcb005c3c2f7.jpg" alt="1625730569613" loading="lazy"></figure>
<h1 id="pageone">PageOne</h1>
<p>在五道口发现了一家PageOne。店里没有理工科的书。多的是人文、艺术、商业。<br>
在书店二楼的经管区，发现了一本《<code>韭菜的自我修养</code>》<br>
整本书在强调：要设置止损线，在熊市的时候要疯狂买买买。书很薄，1个小时左右就可以看完。<br>
还看到一本《<a href="https://weread.qq.com/web/reader/7c432a30724fb5707c4bcb1">二八定律</a>》讲得也很有道理。可惜没有买回家，等我再去书店的时候，这本书已经被收起来了。<br>
看上去PageOne每隔一周都会换一波书。<br>
<img src="https://pandatea.life/post-images/1626711929731.jpg" alt="" loading="lazy"></p>
<h1 id="博弈论究竟是什么">《博弈论究竟是什么》</h1>
<p>除了博弈论的知识点以外，书中还有<a href="https://www.geekonomics10000.com">万维纲</a>老师自己的心得分享。<br>
比如，<code>任何理性的选择，都是不快乐的</code>。</p>
<h1 id="markdown一键转知乎"><a href="https://md.aclickall.com">Markdown一键转知乎</a></h1>
<p>想同步在CSDN、知乎、个人博客三个平台上发文章。<br>
然而，知乎的非markdown格式真的让人头疼。还好有这个工具，安利一波。<br>
<img src="https://pandatea.life/post-images/1626068450589.jpg" alt="" loading="lazy"></p>
<h1 id="海淀雷暴天气">海淀雷暴天气</h1>
<p>这几天晚上大雨伴随雷暴天气<br>
<img src="https://pandatea.life/post-images/1626065881239.gif" alt="" loading="lazy"></p>
<script src="https://unpkg.com/embeddable-nfts/dist/nft-card.min.js"></script>
<p><nft-card
contractAddress="0x495f947276749ce646f68ac8c248420045cb7b5e"
tokenId="54176533048551743526319395374104511941302363578495892190718056192814694268929"></nft-card></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[见闻周记[1]]]></title>
        <id>https://pandatea.life/post/jian-wen-zhou-ji-1/</id>
        <link href="https://pandatea.life/post/jian-wen-zhou-ji-1/">
        </link>
        <updated>2021-07-02T16:47:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="orly丛书封面生成器"><a href="https://orly.nanmu.me/">O’RLY丛书封面生成器</a></h1>
<p><img src="https://pandatea.life/post-images/1625245087067.png" alt="" loading="lazy"><br>
OR系列丛书的封面设计者Edie Freedman看到Unix、vi、sed&amp;awk、uucp、lex、yacc这些词，联想到了<a href="https://store.steampowered.com/app/623280/Dungeons__Dragons_Dark_Alliance/">《龙与地下城》</a>，于是以略惊悚的画风设计了对应的小动物。后来Edie也曾严肃地将其解释为“希望能唤起人们对濒危物种的关注”</p>
<h1 id="das跨越任何疆界的去中心化身份"><a href="https://zhuanlan.zhihu.com/p/379253568">DAS：跨越任何疆界的去中心化身份</a></h1>
<p>一个跨链的DID解决方案，7月10号完成公测，后期上线主网。<br>
<img src="https://pandatea.life/post-images/1625291386700.png" alt="" width="272" height="415" loading="lazy"></p>
<h1 id="深入解读http3的原理及应用"><a href="https://zhuanlan.zhihu.com/p/140739394">深入解读HTTP3的原理及应用</a></h1>
<p>HTTP出新版本咯，HTTP3是围绕<a href="https://zhuanlan.zhihu.com/p/32553477">QUIC协议</a>来实现的。QUIC是谷歌基于UDP开发的网络协议。<br>
<a href="https://blog.csdn.net/vn9PLgZvnPs1522s82g/article/details/86684713">B站</a>、Youtube都在用，可以显著提高视频数据传输效率。现在HTTP3也开始使用UDP协议了。<br>
香香。</p>
<h1 id="项目方的神奇手台">项目方的神奇手台</h1>
<p>项目机会了解到甲方内部使用商用手台进行通信。<br>
<img src="https://pandatea.life/post-images/1625286851055.jpeg" alt="" width="151" height="322" loading="lazy"><br>
型号是 <a href="http://chuanxungs.com/productdetail/90.html">Motorola MTP850</a><br>
RF频段806-870MHz，功率1W，信道带宽25kHz。<br>
项目方在城市中使用RF信道而非4G，无须依赖运营商的稳定运行，以应对某些极端情况的发生。</p>
<ul>
<li>120-173.995MHz 民航，VHF</li>
<li>220-221.995MHz 军航</li>
<li>400-469.995MHz UHF</li>
<li>300-576MHz 350为警用</li>
</ul>
<p>小米对讲机的参数如下，以做对比</p>
<ul>
<li>409.750MHz - 409.9875MHz 普通公众</li>
<li>144.000MHz - 148.000MHz 远距离频道<br>
<img src="https://pandatea.life/post-images/1625290906723.png" alt="" width="350" height="400" loading="lazy"><br>
另RF通信原理读物 <a href="https://www.amazon.com/Introduction-Circuit-Design-Communication-Systems/dp/0995022402">An Introduction to RF Circuit Design for Communication Systems, Roger C. Palmer</a></li>
</ul>
<h1 id="全尚文化"><a href="https://m.tianyancha.com/company/3367471662">全尚文化</a></h1>
<p>工作的写字楼里开了一家店，装修奢华但满地的快递盒子。员工也都是20出头的年轻人。<br>
应该不是快递超市...于是查了一下<br>
<img src="https://pandatea.life/post-images/1625292256973.png" alt="" loading="lazy"><br>
是专门制造流量的组织，好厉害，一直以为微博上那些买流量、买热搜都是存在政治目的的个人行为。<br>
没想象到还有专业的营销团队来做这个。如今培养网红、制造热点这些事都已经标准化、流程化了。<br>
美食可以从流水线上生产出来，就连有趣的信息也可以被量产了。了不起。<br>
<img src="https://pandatea.life/post-images/1625292632542.png" alt="" width="342" height="242" loading="lazy"></p>
<h1 id="非常快速的go语言json库">非常快速的Go语言Json库</h1>
<p><a href="https://github.com/bytedance/sonic">Sonic</a>对于小对象优化如下<br>
<img src="https://pandatea.life/post-images/1625293016456.png" alt="" loading="lazy"><br>
对大对象优化也不错子<br>
<img src="https://pandatea.life/post-images/1625293039267.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[随想：求真]]></title>
        <id>https://pandatea.life/post/qiu-shi-qiu-zhen-zhi-sui-xiang/</id>
        <link href="https://pandatea.life/post/qiu-shi-qiu-zhen-zhi-sui-xiang/">
        </link>
        <updated>2021-06-15T16:41:47.000Z</updated>
        <content type="html"><![CDATA[<p>毕业快一年了，把江大发的毕业礼品小印章拿出来盘了盘。<br>
除了正面的校训“博学 求是 明德”以外，背面还刻着“自强 厚德 实干 求真”的“江大精神”。<br>
<img src="https://pandatea.life/post-images/1623776254703.jpeg" alt="" width="270" height="480" loading="lazy"></p>
<p>私以为，<br>
作为一个靠知识吃饭的魔法师，博学 即 自强。<br>
厚德 和 明德 也重复了。<br>
求是 和 求真 也差不多一个意思。<br>
江大精神似乎是把校训换了几个词又说一遍。<br>
（ 如果是因为印章垂直的四面想不到该刻点啥，我建议整个官网二维码。</p>
<blockquote>
<p>至于江大精神中的<code>实干</code>，倒是深有体会。美其名曰 用知识解决实际问题，与实际产业相结合。<br>
说的不好听了，就是没有学术气息，大家都在想着怎么搞钱。</p>
</blockquote>
<h1 id="求是求真">求是求真</h1>
<h2 id="需求分析">需求分析</h2>
<p>首席说自己是竞争偏好型选手，这使得仰慕他的我有一些遗憾。因为我有点厌恶竞争。<br>
学习比不上年级第一，搞音乐比不上邻班同学，打游戏比不上小伙伴，谈恋爱也没有人喜欢我。<br>
中学的我在各个方向都能找到比自己强的人。<br>
上了大学唯一的不同就是所谓的“各个方向”变多了。<br>
我依然干啥啥不行。竞争更多会让我感觉到努力的疲倦和挫败感的痛苦。</p>
<p>倒也不是彻底不行。但是往往只能拿个90分，无法做到完美。<br>
总是在达到那个“正常人做到这个水平就很不错了”的阈值后，失去热情。<br>
这使得我总不是最强的。我总是跟在别人身后的小弟，不是说话最算数的那个人。（ 这个是我要解决的问题</p>
<p>我过去的反思思路一直是，是不是自己的性格有某种欠缺。比如说我气质偏温和柔软可爱，不强硬。<br>
我的思考方式更偏防守，缺少了卡特曼这种进攻性和斗争性。</p>
<blockquote>
<p>如《南方公园》中的桥段：卡特曼在厕所超大声打电话，凯尔被吵到爆炸。当凯尔生气地diss卡特曼时，卡特曼没有愧疚，反而质问凯子怎么偷听别人电话。</p>
</blockquote>
<p>然而，我遇到了同样平和温柔，却强大清醒的首席、杨博、一博、明政、军先、子航...<br>
“进攻性性格 决定 影响力”的论调渐渐站不住脚了。</p>
<h2 id="自己的路之存在性">自己的路之存在性</h2>
<p>最近和女朋友聊“内卷”的时候，得到了一些点拨。<br>
化解内卷的方法，是老生常谈的“不要跟别人比，多跟自己比”。</p>
<p>相同的智力，相同时间精力的付出。本就是会比先驱们迟一点点。<br>
类似的，如果我是开创了某个思路的人。只要我一直走下去，正常来说，也没人赶得上我。<br>
不必惆怅于自己没有跟上先行者的脚步。只要确保自己的道路是正确的即可。<br>
我需要一个主心骨。</p>
<h2 id="确保道路正确">确保道路正确</h2>
<p>当跑的快慢不是问题后，需要解决的便是方向问题。<br>
可以根据当前道路上是否存在先驱者，来分为两个子问题:</p>
<ul>
<li>先驱做出的选择我是否认同，是否要跟随。</li>
<li>自己前行的道路是否需要修正，如何修正。</li>
</ul>
<p>求解的过程无非就是</p>
<ul>
<li>判断当前选择是否为最优解，</li>
<li>（若不是）是否存在最优解，</li>
<li>（若存在）最优解是否可求，</li>
<li>（若可求）求最优解。</li>
</ul>
<p>这个过程即为校训的“求是”了吧。（ <s>点题</s> =v=*</p>
<h1 id="总结">总结</h1>
<p>无法掌握方向盘的诅咒，其解法便是要有自己的主线。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[QQ飞车 无限芯片图鉴]]></title>
        <id>https://pandatea.life/post/qq-flycar-wu-xian-xin-pian-tu-jian/</id>
        <link href="https://pandatea.life/post/qq-flycar-wu-xian-xin-pian-tu-jian/">
        </link>
        <updated>2021-06-14T09:47:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>QQ飞车 排位赛 新淘汰赛模式，该模式仅限 <code>钻石2</code> 及以下段位玩家参与。<s>没错，就是老子！</s><br>
<img src="https://pandatea.life/post-images/1623671446320.jpeg" alt="" width="200" height="200" loading="lazy"><br>
该模式一局游戏将进行 4轮比赛。<br>
48-&gt;24、24-&gt;12、12-&gt;6、6-&gt;1。<br>
除总决赛会淘汰至最后一人吃鸡外，其他三轮仅淘汰半数玩家。<br>
每轮比赛前，玩家ban选赛道，同时选择一个buff(学名叫<code>无限芯片</code>)，该buff将加入玩家的<code>bufflist</code>,<code>bufflist</code>将在玩家被淘汰时clear。</p>
<h1 id="无限芯片">无限芯片</h1>
<p>共有16种<code>基础芯片</code>，8种<code>终极芯片</code>。<br>
<img src="https://pandatea.life/post-images/1623676669438.jpg" alt="" loading="lazy"></p>
<ul>
<li><font color=#0099ff>终极集气</font>：漂移过程中集气满立刻生成氮气，每秒自动集气4.5%
<ul>
<li><font color=#0099ff>出漂集气</font>：每次结束漂移，立刻获得8%集气。</li>
<li><font color=#0099ff>自动集气</font>：每秒自动集气3%</li>
</ul>
</li>
<li><font color=#AF7AC5>终极起步加速</font>：起步30秒内，氮气最高速度+5km/h，氮气动力+8。开局第一次使用双喷后，立刻获得一个氮气。
<ul>
<li><font color=#AF7AC5>起步加成</font>：起步30秒内，氮气最高速度+5km/h, 小喷动力+8。</li>
<li><font color=#AF7AC5>起步集气</font>：起步获得60%集气。</li>
</ul>
</li>
<li><font color=#E74C3C>终极氮气极速</font>：开局使用第一个氮气时，额外获得1个氮气。每4次进入漂移，7秒内氮气动力+18%。氮气最高速度+4km/h。
<ul>
<li><font color=#E74C3C>氮气极速</font>：每次进入漂移，有48%概率，氮气最高速度+5km/h。</li>
<li><font color=#E74C3C>额外氮气</font>：开局使用第三个氮气时，额外获得一个氮气。</li>
</ul>
</li>
<li><font color=#27AE60>终极转向提升</font>：转向灵敏度提升至最高，转向不减速，基础最高速+2km/h。
<ul>
<li><font color=#27AE60>额外小喷</font>：每次使用氮气，60%概率8秒内小喷最高速度+5km/h，小喷时长+0.06s。</li>
<li><font color=#27AE60>转向提升</font>：转向灵敏度提升至最高。</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://pandatea.life/post-images/1623676680806.jpg" alt="" loading="lazy"></figure>
<ul>
<li><font color=#0099ff>终极集气极速</font>：每9次使用小喷，8秒内基础最高速度+6km/h。每秒自动集气5%。
<ul>
<li><font color=#0099ff>三秒集气</font>：每3秒自动增加9%氮气。</li>
<li><font color=#0099ff>基础急速</font>：每9次使用小喷，7秒内基础最高速度+5km/h。</li>
</ul>
</li>
<li><font color=#AF7AC5>终极腾空加强</font>：小喷时长+0.15s，且小喷动力+5。CWW后首个小喷可额外提升最高速。
<ul>
<li><font color=#AF7AC5>腾空急速</font>：每次腾空，5s内基础最高速度+6km/h。</li>
<li><font color=#AF7AC5>小喷强化</font>：小喷时长+0.12s，且小喷动力+2。</li>
</ul>
</li>
<li><font color=#E74C3C>终极后追补偿</font>：落后第1名时，基础最高速度+3km/h。小喷动力+9且每秒获得4%集气。
<ul>
<li><font color=#E74C3C>后追动力</font>：落后第1名时，基础最高速度+3km/h。小喷动力+6（成为第一名2秒后，效果结束）</li>
<li><font color=#E74C3C>实战急速</font>：超越或被超越时，65%概率9秒内小喷最高速+6km/h。</li>
</ul>
</li>
<li><font color=#27AE60>终极极速集气</font>：每次使用小喷，获得4.5%集气。且每3次集气满，7秒内基础最高速度+9km/h，小喷动力+10%。
<ul>
<li><font color=#27AE60>小喷集气</font>：每次使用小喷获得4.5%集气。</li>
<li><font color=#27AE60>动力急速</font>：每3次集气满，7秒内基础最高速度+9km/h，小喷动力+10%。</li>
</ul>
</li>
</ul>
<h1 id="一点想法">一点想法</h1>
<ul>
<li>
<p><font color=#0099ff>终极集气</font>：好感度 <code>3</code><br>
合成成功后会有一个集气满直接生成氮气的效果，消除了漂移时没有加速效果的空窗期。同时<font color=#0099ff>出漂集气</font>和<font color=#0099ff>自动集气</font>都是被动触发的特效。它不像其他需要小喷和氮气来触发的特效，一旦过弯失误就无法触发效果。<br>
总之<font color=#0099ff>终极集气</font>的三个芯片都容易触发且效果喜人。</p>
</li>
<li>
<p><font color=#AF7AC5>终极起步加速</font>：好感度 <code>-2</code><br>
起跑线上领先别人唯一的意义在于第一个弯道，不用人挤人。过于拥堵的弯道容易碰撞，整局比赛的氮气节奏可能被打破。<br>
不过真的有必要花两张芯片的槽位，来保障第一个弯道安全通过吗？过了第一个弯道，<font color=#AF7AC5>起步芯片</font>可就一点用都没了哦。<br>
<img src="https://pandatea.life/post-images/1623674736372.png" alt="" width="150" height="150" loading="lazy"></p>
</li>
<li>
<p><font color=#E74C3C>终极氮气急速</font>：好感度 <code>-1</code><br>
<font color=#E74C3C>终极氮气急速</font>比较平均地提升了基础面板，但是还稍微有<code>开局</code>羁绊。同时两张基础芯片和终极芯片效果差距很大，基本是三张特效没啥关系的芯片。用起来会有手感差异。<br>
两个基础卡牌<font color=#E74C3C>额外氮气</font>仅仅开局有效果，没啥用；<font color=#E74C3C>氮气极速</font>概率触发，不稳定。</p>
</li>
<li>
<p><font color=#27AE60>终极转向提升</font>：好感度 <code>2</code><br>
<code>转向灵敏度提升至最高，转向不减速</code> 这个效果听上去太强了。某些A车(如<code>金色黄蜂</code>)转向能力还不如D级练习车。可以用这个芯片抢救一下。<br>
另外其基础芯片<font color=#27AE60>额外小喷</font>使用氮气加速即可触发，CWW漂移还可以额外触发一次小喷效果增幅。但是对技巧要求较高。<br>
如果对自己的过弯技术比较自信，可以尝试驾驭这个芯片。<br>
<img src="https://pandatea.life/post-images/1623674872593.png" alt="" width="150" height="150" loading="lazy"></p>
</li>
<li>
<p><font color=#0099ff>终极集气极速</font> 好感度 <code>3</code><br>
相比于另一套紫色芯片<font color=#0099ff>终极集气</font>，这一套虽然触发难度有所提升，且没有强力的<code>气满即氮气</code>效果。但是基础面板会有所提升，并且集气加成有一个0.5%/s的提升。</p>
</li>
<li>
<p><font color=#AF7AC5>终极腾空加强</font> 好感度 <code>-5</code><br>
腾空加基础面板，跟赛道关系太大...就图一乐。<br>
<img src="https://pandatea.life/post-images/1623674562706.jpeg" alt="" width="150" height="150" loading="lazy"></p>
</li>
<li>
<p><font color=#E74C3C>终极后追补偿</font> 好感度 <code>5</code><br>
排位赛是为了赢，不是为了破纪录。没有什么比拿第一更重要了。该特效的触发效果为<code>只要不是第一</code>。<br>
不需要集气，不需要技巧，不需要考虑触发机制。只要不是第一，就有一个稳定的基础面板加成。<br>
无脑地跑就完事了，过一会儿莫名其妙就是第一了。<br>
<img src="https://pandatea.life/post-images/1623674363795.jpg" alt="" width="150" height="150" loading="lazy"></p>
</li>
<li>
<p><font color=#27AE60>终极极速集气</font> 好感度 <code>3</code><br>
小喷集气，技巧熟练的选手可以多使用WCW来更好的利用这个特效。需要3次集气满才可触发基础面板的加成，所以过弯时不能磕碰。<br>
总之需要对赛道熟悉一些，技术优秀的选手可以尝试驾驭这套芯片。<br>
<img src="https://pandatea.life/post-images/1623674891026.png" alt="" width="150" height="150" loading="lazy"></p>
</li>
</ul>
<h1 id="final">Final</h1>
<p>最后祝自己能整个星耀以上段位嘚瑟嘚瑟。<br>
<img src="https://pandatea.life/post-images/1623675246132.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[newland-rise 关键契约: Goblin and Strategy]]></title>
        <id>https://pandatea.life/post/newland-rise-dai-ma-pin-du-2-strategy/</id>
        <link href="https://pandatea.life/post/newland-rise-dai-ma-pin-du-2-strategy/">
        </link>
        <updated>2021-06-08T06:05:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="strategy">Strategy</h1>
<h2 id="简介">简介</h2>
<p>newland-rise定义了三种金融策略来管理用户的资产。newland-rise这三种Strategy均面向借钱投资场景。</p>
<blockquote>
<p>类似从花呗借钱买基金...</p>
</blockquote>
<h2 id="mdxstrategyaddtwosidesoptimal-双边最优策略">MdxStrategyAddTwoSidesOptimal 双边最优策略</h2>
<h3 id="简介-2">简介</h3>
<p>该Strategy继承自Piloit项目的理财策略。<br>
理解起来比较简单，即Strategy将拥有的Token0和Token1余额进行调整。使其比例刚好是当前市场价格。以这样的比例AddLiquidity效果最佳。</p>
<h3 id="optimaldeposit">optimalDeposit</h3>
<p><img src="https://pandatea.life/post-images/1623133491186.jpeg" alt="" loading="lazy"><br>
计算最优Deposit数量</p>
<h3 id="calandswap">calAndSwap</h3>
<p><img src="https://pandatea.life/post-images/1623134755095.jpeg" alt="" loading="lazy"><br>
通过optimalDeposit函数获取需要调整的数量。<br>
把strategy中所持有的t0和t1 数量进行调整，调整后的t0和t1价值相等。<br>
如果此时addLiquidity，即是最优方案。</p>
<blockquote>
<p>这里价值相等的定义是Mdx交易所的pool配比。</p>
</blockquote>
<h3 id="safeunwrapperandallsend">safeUnWrapperAndAllSend</h3>
<p>这个函数就是简单的转账。如果要转账的token是WHT，就先withdraw成HT再转。<br>
HT转账的时候，调用的函数是safeTransferETH，存在重入风险。<br>
不过所有调用了safeUnWrapperAndAllSend函数的地方都有nonReentrant修饰符。<br>
非常强力。</p>
<h3 id="execute-核心函数">execute 核心函数</h3>
<p>调用execute时，输入参数如下</p>
<ul>
<li>user 受益人，在newland项目中，该值从Bank合约一路传下来，指的就是<code>tx.origin</code></li>
<li>borrowToken <code>tx.origin</code>借款币种</li>
<li>borrow <code>tx.origin</code>借款数量</li>
<li>debt 未使用</li>
<li>data 额外参数，解析成如下。用户想要进行理财的输入资金，和最小LPToken输出数量
<ul>
<li>_token0</li>
<li>_token1</li>
<li>token0Amount</li>
<li>token1Amount</li>
<li>_minLPAmount<br>
<img src="https://pandatea.life/post-images/1623145673516.jpeg" alt="" loading="lazy"><br>
函数先将用户输入的t0 t1做一次预处理，处理成ERC20token格式，使用calAndSwap函数进行调平。<br>
调平后AddLiquidity。<br>
最后</li>
</ul>
</li>
<li>将获取的lptoken转给<code>msg.sender</code></li>
<li>将剩余的borrowToken转给<code>msg.sender</code></li>
<li>将剩余的另一种代币直接转给<code>user</code></li>
</ul>
<h2 id="mdxstrategywithdrawminimizetrading-还一部分获益一部分">MdxStrategyWithdrawMinimizeTrading 还一部分，获益一部分</h2>
<h3 id="简介-3">简介</h3>
<p>该策略的输入是LPToken和debt。</p>
<ul>
<li>LPToken 是 用户托管于Goblin的凭证</li>
<li>debt 是用户借了多少钱来投资</li>
</ul>
<p>Strategy将lptoken全部removeLiquidity为token0和token1。<br>
由于token0和token1中有一部分钱是用户借来的，还需要偿还debt。<br>
最终剩下的token，便是用户的收益。<br>
<img src="https://pandatea.life/post-images/1623210065555.gif" alt="" loading="lazy"></p>
<h3 id="swapifneed">swapIfNeed</h3>
<p>该函数用于判断，是否需要通过swap操作来有足够的钱偿还贷款。</p>
<pre><code class="language-JavaScript">    /// swap if need.
    function swapIfNeed(address borrowToken, address tokenRelative, uint256 debt) internal {
        uint256 borrowTokenAmount = borrowToken.myBalance();
        if (debt &gt; borrowTokenAmount) {
            tokenRelative.safeApprove(address(router), 0);
            tokenRelative.safeApprove(address(router), uint256(-1));

            uint256 remainingDebt = debt.sub(borrowTokenAmount);
            address[] memory path = new address[](2);
            path[0] = tokenRelative;
            path[1] = borrowToken;
            router.swapTokensForExactTokens(remainingDebt, tokenRelative.myBalance(), path, address(this), now); 
        }
    }
</code></pre>
<h3 id="execute-核心函数-2">execute 核心函数</h3>
<pre><code class="language-javascript">    /// @dev Execute worker strategy. Take LP tokens. Return debt token + token want back.
    /// @param user User address to withdraw liquidity.
    /// @param borrowToken The token user borrow from bank.
    /// @param debt User's debt amount.
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, address borrowToken, uint256 /* borrow */, uint256 debt, bytes calldata data)
    external
    override
    payable
    nonReentrant
    {
        // 1. Find out lpToken and liquidity.
        // whichWantBack: 0:token0;1:token1;2:token what surplus.
        (address token0, address token1, uint whichWantBack) = abi.decode(data, (address, address, uint));

        // is borrowToken is ht.
        bool isBorrowHt = borrowToken == address(0);
        borrowToken = isBorrowHt ? wht : borrowToken;

        // the relative token when token0 or token1 is ht.
        address htRelative = address(0);
        {
            if (token0 == address(0)){
                token0 = wht;
                htRelative = token1;
            }
            if (token1 == address(0)){
                token1 = wht;
                htRelative = token0;
            }
        }
        require(borrowToken == token0 || borrowToken == token1, &quot;borrowToken not token0 and token1&quot;);
        require(whichWantBack == uint(0) || whichWantBack == uint(1) || whichWantBack == uint(2),
            &quot;whichWantBack not in (0,1,2)&quot;);

        address tokenUserWant = whichWantBack == uint(0) ? token0 : token1;

        IMdexPair lpToken = IMdexPair(factory.getPair(token0, token1));
        token0 = lpToken.token0();
        token1 = lpToken.token1();

        {
            lpToken.approve(address(router), uint256(-1));
            router.removeLiquidity(token0, token1, lpToken.balanceOf(address(this)), 0, 0, address(this), now);
        }
        {
            address tokenRelative = borrowToken == token0 ? token1 : token0;

            swapIfNeed(borrowToken, tokenRelative, debt);

            if (isBorrowHt) {
                IWHT(wht).withdraw(debt);
                SafeToken.safeTransferETH(msg.sender, debt);
            } else {
                SafeToken.safeTransfer(borrowToken, msg.sender, debt);
            }
        }

        // 2. swap remaining token to what user want.
        if (whichWantBack != uint(2)) {
            address tokenAnother = tokenUserWant == token0 ? token1 : token0;
            uint256 anotherAmount = tokenAnother.myBalance();
            if(anotherAmount &gt; 0){
                tokenAnother.safeApprove(address(router), 0);
                tokenAnother.safeApprove(address(router), uint256(-1));

                address[] memory path = new address[](2);
                path[0] = tokenAnother;
                path[1] = tokenUserWant;
                router.swapExactTokensForTokens(anotherAmount, 0, path, address(this), now);
            }
        }

        // 3. send all tokens back.
        if (htRelative == address(0)) {
            token0.safeTransfer(user, token0.myBalance());
            token1.safeTransfer(user, token1.myBalance());
        } else {
            safeUnWrapperAndAllSend(wht, user);
            safeUnWrapperAndAllSend(htRelative, user);
        }
    }
</code></pre>
<p>调用execute时，输入参数如下</p>
<ul>
<li>user 受益人 <code>tx.origin</code></li>
<li>borrowToken <code>tx.origin</code>借款币种</li>
<li>borrow 未使用</li>
<li>debt 借款借了多少</li>
<li>data 额外参数，解析成如下。
<ul>
<li>_token0</li>
<li>_token1</li>
<li>whichWantBack (0, 1, 2) 三选一，选择0或1即只要其中某种代币；选择2就是不需要进行整合，直接分别获取token0和token1。</li>
</ul>
</li>
</ul>
<p>函数先将LPToken removeLiquidity成token0 和 token1<br>
再通过SwapIfNeed 还清贷款。<br>
最终将剩余的token汇总成whichWantBack token 并转给user。</p>
<h2 id="mdxliqstrategy-全部收益拿来还钱">MdxLiqStrategy 全部收益拿来还钱</h2>
<h3 id="简介-4">简介</h3>
<p>MdxLiqStrategy策略是newland-rise在Pilot上新增的。<br>
该策略与MdxStrategyWithdrawMinimizeTrading类似，输入LPToken，removeLiquidity为token0和token1。<br>
但在MdxLiqStrategy中，Strategy将全部的token0和token1整合成borrowToken并归还Goblin。<br>
并没有在Strategy层分发用户的收益。</p>
<h3 id="execute-核心函数-3">execute 核心函数</h3>
<pre><code class="language-javascript">function execute(address /* user */, address borrowToken, uint256 /* borrow */, uint256 /* debt */, bytes calldata data)
    external
    override
    payable
    nonReentrant
    {
        IMdexPair lpToken = IMdexPair(abi.decode(data, (address)));
        address token0 = lpToken.token0();
        address token1 = lpToken.token1();

        // is borrowToken is ht.
        bool isBorrowHt = borrowToken == address(0);
        borrowToken = isBorrowHt ? wht : borrowToken;

        require(borrowToken == token0 || borrowToken == token1, &quot;borrowToken not token0 and token1&quot;);

        {
            lpToken.approve(address(router), uint256(-1));
            router.removeLiquidity(token0, token1, lpToken.balanceOf(address(this)), 0, 0, address(this), now);
        }
        {
            address tokenRelative = borrowToken == token0 ? token1 : token0;
            swapToBorrowToken(borrowToken, tokenRelative);
            if (isBorrowHt) {
                IWHT(wht).withdraw(borrowToken.myBalance());
                SafeToken.safeTransferETH(msg.sender, borrowToken.myBalance());
            } else {
                SafeToken.safeTransfer(borrowToken, msg.sender, borrowToken.myBalance());
            }
        }
    }
</code></pre>
<p>调用execute时，输入参数如下</p>
<ul>
<li>borrowToken <code>tx.origin</code>借款币种</li>
<li>data 额外参数，解析成如下。
<ul>
<li>lpToken</li>
</ul>
</li>
</ul>
<p>函数先将LPToken removeLiquidity成token0 和 token1<br>
把所有token汇总成borrowToken, 转给Goblin</p>
<h1 id="goblin">Goblin</h1>
<h2 id="简介-5">简介</h2>
<p>在newland-rise项目中，只有Goblin合约调用了Strategy。<br>
Goblin是newland-rise项目中用户资金的管理者。<br>
用户通过Bank借钱，把借到的钱 和 自己的本金 交给Goblin进行投资。</p>
<h2 id="health-healthoracle">health &amp;&amp; healthOracle</h2>
<p>health和healthOracle函数，其目的都是判断用户的仓位状态是否正常，如果不正常即可被清算。</p>
<pre><code class="language-javascript">    /// @dev Return the amount of debt token to receive if we are to liquidate the given position.
    /// @param id The position ID to perform health check.
    /// @param borrowToken The token this position had debt.
    function healthOracle(uint256 id, address borrowToken) external override view returns (uint256) { // 哥布林把手里的钱计算成 borrowToken为单位的价格
        bool isDebtHt = borrowToken == address(0);
        require(borrowToken == token0 || borrowToken == token1 || isDebtHt, &quot;borrowToken not token0 and token1&quot;);

        // 1. Get the position's LP balance and LP total supply.
        uint256 lpBalance = posLPAmount[id];
        uint256 lpSupply = lpToken.totalSupply();
        // Ignore pending mintFee as it is insignificant
        // 2. Get the pool's total supply of token0 and token1.
        (uint256 totalAmount0, uint256 totalAmount1,) = lpToken.getReserves();

        // 3. Convert the position's LP tokens to the underlying assets.
        uint256 userToken0 = lpBalance.mul(totalAmount0).div(lpSupply);
        uint256 userToken1 = lpBalance.mul(totalAmount1).div(lpSupply);
        uint256 userAmtProduct = userToken0.mul(userToken1);

        if (isDebtHt) {
            borrowToken = token0 == wht ? token0 : token1;
        }

        (int token0Price,) = oracle.getPrice(token0);
        (int token1Price,) = oracle.getPrice(token1);
        require(token0Price &gt; 0, 'oracle token0Price invalid');
        require(token1Price &gt; 0, 'oracle token1Price invalid');
        uint256 priceProduct = uint(token0Price).mul(uint(token1Price));
        uint totalAmt = Math.sqrt(userAmtProduct.mul(priceProduct)).mul(2);
        // 4. Convert all farming tokens to debtToken and return total amount.
        if (borrowToken == token0) {
            return totalAmt.div(uint(token0Price));
        } else {
            return totalAmt.div(uint(token1Price));
        }
    }
</code></pre>
<p>Goblin先获取输入id对应的仓位里储存的LPToken</p>
<pre><code class="language-javascript">        uint256 lpBalance = posLPAmount[id];
        uint256 lpSupply = lpToken.totalSupply();
</code></pre>
<p>再将LPToken用borrowToken作为单位来计算价值。</p>
<pre><code class="language-javascript">        // 3. Convert the position's LP tokens to the underlying assets.
        uint256 userToken0 = lpBalance.mul(totalAmount0).div(lpSupply);
        uint256 userToken1 = lpBalance.mul(totalAmount1).div(lpSupply);
        uint256 userAmtProduct = userToken0.mul(userToken1);

        if (isDebtHt) {
            borrowToken = token0 == wht ? token0 : token1;
        }

        (int token0Price,) = oracle.getPrice(token0);
        (int token1Price,) = oracle.getPrice(token1);
        require(token0Price &gt; 0, 'oracle token0Price invalid');
        require(token1Price &gt; 0, 'oracle token1Price invalid');
        uint256 priceProduct = uint(token0Price).mul(uint(token1Price));
        uint totalAmt = Math.sqrt(userAmtProduct.mul(priceProduct)).mul(2);
        // 4. Convert all farming tokens to debtToken and return total amount.
        if (borrowToken == token0) {
            return totalAmt.div(uint(token0Price));
        } else {
            return totalAmt.div(uint(token1Price));
        }
</code></pre>
<p>上述代码转化成数学公式为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>l</mi><mi>t</mi><mi>h</mi><mi>O</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>l</mi><mi>e</mi><mo>=</mo><mfrac><mrow><mn>2</mn><msqrt><mrow><msub><mi>t</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>P</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>t</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>P</mi><mn>1</mn></msub></mrow></msqrt></mrow><msub><mi>P</mi><mn>0</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">healthOracle = \frac{2\sqrt{t_0 * P_0 * t_1 * P_1}}{P_0}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3646650000000005em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5286650000000002em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.851665em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.811665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18833500000000003em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>可见是计算了一下几何平均数，几何平均数相对于算数平均数更加安全。因为它将t0和t1相乘，即得到K。又由于K值守恒，使攻击者无法通过闪电贷等方法操纵t0和t1的比例，进而无法操纵币价。</p>
<h2 id="work函数">work函数</h2>
<p><img src="https://pandatea.life/post-images/1623131957146.jpeg" alt="work函数" loading="lazy"><br>
Goblin接受Bank的指令，调取Strategy进行相关动作。把收到的borrowToken向上层传递。<br>
如果是加仓操作，Goblin会跟Chef进行交互，实现farming同时存farming凭证的功能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[胖达和他的朋友们]]></title>
        <id>https://pandatea.life/post/about/</id>
        <link href="https://pandatea.life/post/about/">
        </link>
        <updated>2021-06-06T06:19:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="关于我">关于我</h3>
<p>ID 是 Panda，读作&quot;胖达&quot;<br>
指的是这只温柔可爱的熊猫子！(´▽`ʃ♡ƪ)<br>
<img src="https://pandatea.life/post-images/1622961691974.png" alt="熊熊遇见你！" width="200" height="200" loading="lazy"></p>
<blockquote>
<p>图片来自超可爱的动画片《熊熊遇见你》<br>
<s>没看过的，快去看！</s></p>
</blockquote>
<p>江苏大学 战斗魔法系毕业，又叫网络空间安全系。</p>
<h3 id="好朋友们">好朋友们！</h3>
<ul>
<li><a href="https://www.boringboys.top">BoringBoys 同样是战斗魔法专业的涛涛子</a></li>
<li><a href="https://xchens.cn/index">xchens 同样是战斗魔法专业，但转职成为圣光守卫的白魔法师少华子</a></li>
<li><a href="https://blog.cyan.fit">ALLEicf Cyan。我女朋友，一个厉害(有点可怕)的女人</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[无力感 + 人格塑造失败]]></title>
        <id>https://pandatea.life/post/202161-nian-zhong-hui-gu/</id>
        <link href="https://pandatea.life/post/202161-nian-zhong-hui-gu/">
        </link>
        <updated>2021-06-01T14:53:45.000Z</updated>
        <content type="html"><![CDATA[<p>我有一段时间没有锻炼身体了，血压又降了下来。<br>
平躺时常会感觉不到自己的四肢。严重的时候，大脑无法理解长句子。<br>
同时对自己日渐下降的记忆力和涣散的注意力感到悲伤和无助。</p>
<h3 id="回学校之旅-无力感">回学校之旅 无力感</h3>
<p>1月3日，从安贞医院做完核酸检测后，奔地铁站。住在了第一次上学去报到的小宾馆。<br>
从我上学到毕业4年了，这家宾馆没有任何升级、进步。也许这就是二三线城市的缩影。岁月静好。如果我沉迷于类似的舒适圈，大概也会像这个宾馆一样，没有变化。如果我在二三线城市，倒也正常。悠闲地翻着日历，抚摸流逝的时间。倒也是我想要的生活。悠哉悠哉，适合想在下雨天躺在家里欣赏雷暴天气的低血压患者。但命运之河将我漂流到了北京这种奢华，昂贵的地方。由俭入奢易，由奢入俭难。我怕是回不去了。<br>
只能选择竞争,不断地逼迫弱小的自己。</p>
<p>少华的仙人掌失踪了。<br>
<img src="https://pandatea.life/post-images/1622563149647.png" alt="仙人掌原貌" loading="lazy"><br>
只留下了空空的栏杆。<br>
<img src="https://pandatea.life/post-images/1622563169610.png" alt="空空的栏杆" loading="lazy"><br>
泥泞中有被丢弃的皮靴，零食的盒子。就是没有陪伴4年的仙人掌。<br>
除了仙人掌，还有很多东西，随着大学毕业离我而去。比如知友网咖门口站了四年的凯特琳同志，经受不住疫情的考验，失业了。<br>
<img src="https://pandatea.life/post-images/1622563313845.png" alt="消失的凯特琳" loading="lazy"></p>
<p>看着我吐槽了4年的红绿灯（东西向共有两条人行道，两条人行道的红绿灯不同步），<br>
<img src="https://pandatea.life/post-images/1622563538232.png" alt="阴间红绿灯" loading="lazy"><br>
无论是我失去的还是我厌恶的，都无法改变。<br>
太弱小了！这就是因为我们没有力量……<br>
<img src="https://pandatea.life/post-images/1622563952626.jpg" alt="太弱小了" loading="lazy"></p>
<h3 id="失败的人格">失败的人格</h3>
<p>公司wiki上开了一个page，来记录一些 <code>稍后研究</code> 的项目。然而就写了那一次。市场部给我的文章、翻译等工作不少奖金，但我没有坚持投稿。健身房办了两年的卡，一次又一次的借口，到现在也鸽了许久。尝试认真地打英雄联盟上分，也没有成功。<br>
<img src="https://pandatea.life/post-images/1622564644102.jpg" alt="" loading="lazy"><br>
意外的发现，项目中的积累在现实世界中有回报。可惜不是正茬儿。一个利用后便会获利百万的机会摆在我面前。浸润在极乐中，感受心跳。甚至计划好后路，找来备用的身份，不断的演练。<br>
<img src="https://pandatea.life/post-images/1622564386360.png" alt="演戏计划" loading="lazy"><br>
最终变成一纸issue，没有回音。尝试新建一个漏洞挖掘项目，<code>赶海拾贝</code>。也徐徐没有成果。<br>
微信读书，书架整得花里胡哨，但没有一本好好读完过。</p>
<p>年初我就意识到用大脑记东西和记笔记的不同了。人脑记忆本身就是对时间的主观定义。可惜的是这半年来我还是很少有意识地用大脑记住一些有用的东西。对印象笔记等生产力工具的依赖反而更加严重了。</p>
<p>3月25日发现的<code>沙门氏菌</code>，跟首席提了一句三明治攻击。后来全组人研究的都比我明白。大家那种认真的举一反三的好学品质，到了6月1日，我也没有学会。这里甚至有另一种品质，叫做<code>沉稳</code>。说出去的话，承诺的东西，认可的事情。都必须确定、有把握。<br>
但到了今天我仍然满嘴跑火车。老奶奶唱戏，想一出是一出。</p>
<p>4月的HVV出差让我的生活又多了一点负能量。压抑的情绪变多了。曾设想，把这次历练当成一次机遇，让我慢慢理解延迟享受的优美。但是失败了。</p>
<h3 id="雨庭">雨庭</h3>
<p>这半年里，我失去了前进的动力。忘记了是什么驱动着我的身体。愈发的懒惰、放纵。<br>
新年夜时，甚至绝望于茕茕孑立感。</p>
<p>但雨庭莅临了我的生活，孤独感不再连续和窒息。在凄凉的内蒙古草原工业荒地中，我找到了同行的依靠。<br>
<img src="https://pandatea.life/post-images/1622562144646.png" alt="雨庭之章" loading="lazy"></p>
<p>我不需要领导的认可了，也不需要同事的赞美，不在乎B站的初中生教我怎么做人。<br>
只有我爱的人，才能左右我。<br>
<img src="https://pandatea.life/post-images/1622567377648.png" alt="所爱" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Defcon 2019 Qualify: redacted puzzle Writeup]]></title>
        <id>https://pandatea.life/post/defcon-2019-qualify-redacted-puzzle-writeup/</id>
        <link href="https://pandatea.life/post/defcon-2019-qualify-redacted-puzzle-writeup/">
        </link>
        <updated>2021-05-29T11:38:26.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#defcon-2019-qualify-redacted-puzzle">Defcon 2019 Qualify: redacted-puzzle</a>
<ul>
<li><a href="#1attachments">1.Attachments</a></li>
<li><a href="#2source-code">2.source code</a></li>
<li><a href="#3author-bboe">3.author: bboe</a></li>
<li><a href="#4writeups">4.writeups</a></li>
<li><a href="#5%E7%9F%A5%E8%AF%86%E7%82%B9">5.知识点</a>
<ul>
<li><a href="#51-%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F">5.1 图像模式</a></li>
<li><a href="#52-pallete">5.2 pallete</a></li>
<li><a href="#53-python-pil%E5%8C%85%E4%BD%BF%E7%94%A8">5.3 Python PIL包使用</a></li>
<li><a href="#54-base%E7%B3%BB%E5%88%97%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86">5.4 Base系列编码原理</a></li>
</ul>
</li>
<li><a href="#6-defcon-2020q-uploooadit">6 Defcon 2020q uploooadit</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</p>
<h1 id="defcon-2019-qualify-redacted-puzzle">Defcon 2019 Qualify: redacted-puzzle</h1>
<p>ctftime link: <a href="https://ctftime.org/task/8526">https://ctftime.org/task/8526</a></p>
<h2 id="1attachments">1.Attachments</h2>
<p><a href="https://s3.us-west-2.amazonaws.com/archive-ooo-public/public_files/0a0403756b188cd2a2aefa29121ec565802095297a357998064bf4135e0713e5/redacted-puzzle.gif">redacted-puzzle.gif</a><br>
Everything you need is in this file.</p>
<h2 id="2source-code">2.source code</h2>
<p><a href="https://github.com/o-o-overflow/dc2019q-puzzle">dc2019q-puzzle</a></p>
<h2 id="3author-bboe">3.author: bboe</h2>
<p><strong>Bryce Boe</strong>是defcon的组织者，AppFolio公司的软件工程师\Tech Leader，加州大学圣巴巴拉分校 助教。</p>
<ul>
<li>Social Media
<ul>
<li><a href="https://twitter.com/bboe">twitter</a></li>
<li><a href="http://www.bryceboe.com/">Blog</a></li>
<li><a href="https://github.com/bboe">Github</a></li>
<li><a href="https://scholar.google.com/citations?user=T83k-n8AAAAJ&amp;hl=zh-CN">Google Scholar</a></li>
</ul>
</li>
</ul>
<p>这位老师最后一篇论文发表于2014年，其博客也停更于2014年。<br>
其主要贡献在于可视化的编程工具与教育事业的结合。<br>
在论文<a href="https://seclab.bu.edu/papers/large_scale_hacking-dimva2010.pdf">Organizing large scale hacking competitions</a>中提出了大规模黑客技术比赛的设想。<br>
身为人父的他已经在享受生活了，羡慕。<br>
<img src="https://img-blog.csdnimg.cn/20210426181900111.png" alt="" loading="lazy"><br>
另外，可以找到他在defcon2020q中出的另一道题目<a href="https://github.com/o-o-overflow/dc2020q-uploooadit">Defcon 2020q uploooadit</a></p>
<h2 id="4writeups">4.writeups</h2>
<ul>
<li><a href="https://ctftime.org/writeup/15359">ThreatLevelMidnight</a></li>
<li><a href="https://ctftime.org/writeup/15290">OSUSEC</a></li>
<li><a href="https://ctftime.org/writeup/15252">IDontHaveATeam</a></li>
<li><a href="https://ctftime.org/writeup/15247">ThreatLevelMidnight</a></li>
<li><a href="https://xi4or0uji.github.io/2019/05/19/defcon-ctf-%E5%AD%A6%E4%B9%A0/#redacted-puzzle">2019 defcon 学习</a></li>
</ul>
<p>题目给出一个全黑的gif。分析发现图片的调色板为纯黑。<br>
我们逐帧修改其调色板，让画面变得多彩一些。</p>
<pre><code class="language-python">from PIL import Image
imageObject = Image.open(&quot;./redacted-puzzle.gif&quot;)
for frame in range(0,imageObject.n_frames):
    imageObject.seek(frame)
    imageObject.putpalette([255,0,0,0,255,0,0,0,255])
    imageObject.save(&quot;./tmp/output-%02u.png&quot; % frame)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210426181959537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></figure>
<p>可以得到一组 类似八边形的图片。<br>
其中给出了一个长32的字母表 <code>flag_alphabet = &quot;+-=ABCDEFGHIJKLMNOPQRSTUVWXYZ_{}&quot;</code><br>
<img src="https://img-blog.csdnimg.cn/20210426182026283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></p>
<p>每一张图都是一个8bit的2进制数字。</p>
<pre><code class="language-python">verticies = ['10001100', '01100011', '11100100', '01000110', '10000101', '00111101', '01000010', '10011000', '11100000',
                 '11110100', '10000000', '00101101', '01110010', '00011100', '00001000', '10100101', '11010111', '01101110',
                 '10100110', '10010001', '10111100', '10000100', '10000001', '10111001', '11010100', '00111011', '11001110',
                 '11110010', '00011110', '10011101', '11001001', '11000111', '01100101', '00011110', '10011111']
</code></pre>
<p>由于<code>flag_alphabet</code>中有32个可见字符，想到Base32编码方式。<br>
用符号表中的字母编码gif，得到flag。<br>
<img src="https://img-blog.csdnimg.cn/20210426182047563.png" alt="" loading="lazy"></p>
<pre><code class="language-python">verticies = ['10001100', '01100011', '11100100', '01000110', '10000101', '00111101', '01000010', '10011000', '11100000',
                 '11110100', '10000000', '00101101', '01110010', '00011100', '00001000', '10100101', '11010111', '01101110',
                 '10100110', '10010001', '10111100', '10000100', '10000001', '10111001', '11010100', '00111011', '11001110',
                 '11110010', '00011110', '10011101', '11001001', '11000111', '01100101', '00011110', '10011111']
   
alphabet = '+-=ABCDEFGHIJKLMNOPQRSTUVWXYZ_{}'

def solve(verticies):
    combined = ''
    for v in verticies:
        combined += v

    indicies = []
    for x in range (0, len(combined)//5):
        indicies.append(combined[x * 5:x * 5 + 5])

    answer = ''
    for x in indicies:
        answer += alphabet[int(x, 2)]

    print (answer)

def twist(verticies):
    newverticies = []

    for v in verticies:
        # v = abcdefgh -&gt; habcdefg
        newv = ''
        newv+=v[7]
        newv+=v[0:7]        
        newverticies.append(newv)

    return newverticies

for x in range (0,8):
    solve(verticies)
    verticies = twist(verticies)
    
print(&quot;Finished Program&quot;)
</code></pre>
<h2 id="5知识点">5.知识点</h2>
<h3 id="51-图像模式">5.1 图像模式</h3>
<p><a href="https://www.osgeo.cn/pillow/handbook/concepts.html#modes">https://www.osgeo.cn/pillow/handbook/concepts.html#modes</a></p>
<p>这个 mode 是一个字符串，它定义图像中像素的类型和深度。每个像素使用位深度的全部范围。所以1位像素的范围是0-1，8位像素的范围是0-255，依此类推。<br>
当前版本支持以下标准模式：</p>
<ul>
<li>1 （1位黑白像素，每字节存储一个像素）</li>
<li>L （8位像素，黑白）</li>
<li>P （8位像素，使用调色板映射到任何其他模式）</li>
<li>RGB （3x8位像素，真彩色）</li>
<li>RGBA （4x8位像素，带透明蒙版的真彩色）</li>
<li>CMYK （4x8位像素，分色）</li>
<li>YCbCr （3x8位像素，彩色视频格式）</li>
<li>LAB （3x8位像素，L A B颜色空间）</li>
<li>HSV （3x8位像素、色调、饱和度、值颜色空间）</li>
<li>I （32位有符号整数像素）</li>
<li>F （32位浮点像素）</li>
</ul>
<p>Image库还支持一些特殊模式:</p>
<ul>
<li>LA （L和阿尔法）</li>
<li>PA （P与阿尔法）</li>
<li>RGBX （带填充的真彩色）</li>
<li>RGBa （带预乘alpha的真彩色）</li>
<li>La （L带预乘α）</li>
<li>I;16 （16位无符号整数像素）</li>
<li>I;16L （16位小端无符号整数像素）</li>
<li>I;16B （16位大端无符号整数像素）</li>
<li>I;16N （16位本机端无符号整数像素）</li>
<li>BGR;15 （15位反转真彩色）</li>
<li>BGR;16 （16位反转真彩色）</li>
<li>BGR;24 （24位反转真彩色）</li>
<li>BGR;32 （32位反转真彩色）</li>
</ul>
<blockquote>
<p>我怀疑MISC题目的常用工具 stegsolve 就是在各种Mode之间做切换。</p>
</blockquote>
<h3 id="52-pallete">5.2 pallete</h3>
<p><a href="https://mathpretty.com/12731.html#Imageputpalette">使用PIL库 改变图片的调色板</a><br>
当图片模式选择<code>P</code>时，ImageObject有pallete参数。<br>
pallete默认为<code>RGB</code>格式，是一个长度为768的list对象。<br>
在<code>RGB</code>格式下，pallete的list对象被3个一组，表示RGB颜色。<br>
最多记录256个<code>RGB</code>颜色。</p>
<pre><code class="language-python">palette = []
for i in range(256):
    palette.extend((i, i, i)) # grayscale wedge

assert len(palette) == 768

im.putpalette(palette)
</code></pre>
<h3 id="53-python-pil包使用">5.3 Python PIL包使用</h3>
<p><a href="https://www.osgeo.cn/pillow/reference/Image.html">PIL包文档</a></p>
<h3 id="54-base系列编码原理">5.4 Base系列编码原理</h3>
<p><a href="https://zhuanlan.zhihu.com/p/51316306">Base64, Base32 和 Base16，用通俗的语言深入到内部</a></p>
<h2 id="6-defcon-2020q-uploooadit">6 <a href="https://github.com/o-o-overflow/dc2020q-uploooadit">Defcon 2020q uploooadit</a></h2>
<p><code>uploooadit</code>是一道<code>WEB</code>题，主要考点是<code>haproxy 1.9.10</code>中存在的<code>HTTP smuggling</code>漏洞。<br>
Writeup可以看这篇<a href="https://www.xiaozzz.xyz/2020/05/22/Defcon-CTF-Qual-2020-Web-WP/">文章</a></p>
<h1 id="总结">总结</h1>
<p>Bryce Boe 老师总共出过两道Defcon的题目。<br>
我没有找到他在题目上线之前对考点的研究痕迹。<br>
其社交媒体或发布的论文中也没有对应的体现。<br>
因此无法预测在2021 defcon中，bboe老师将带来什么样的题目。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Defcon 2018 Qualify: Easy Pisy writeup]]></title>
        <id>https://pandatea.life/post/defcon-2018-qualify-easy-pisy-writeup/</id>
        <link href="https://pandatea.life/post/defcon-2018-qualify-easy-pisy-writeup/">
        </link>
        <updated>2021-05-29T11:37:23.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#defcon-2018-qualify-easy-pisy">Defcon 2018 Qualify: Easy Pisy</a>
<ul>
<li><a href="#1-source-code">1. Source Code</a></li>
<li><a href="#2-writeup">2. Writeup</a></li>
<li><a href="#3-info">3. Info</a></li>
<li><a href="#4-analysis-of-author">4. Analysis of Author</a>
<ul>
<li><a href="#41-janmasarik">4.1 janmasarik</a></li>
<li><a href="#42-nneonneo-robert-xiao">4.2 nneonneo (Robert Xiao)</a></li>
<li><a href="#43-marc-stevens">4.3 Marc Stevens</a></li>
<li><a href="#44-elie-bursztein-google">4.4 Elie Bursztein (Google)</a></li>
</ul>
</li>
<li><a href="#5-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%AD%BE%E5%90%8D%E5%87%BD%E6%95%B0">5. 语言中的签名函数</a>
<ul>
<li><a href="#51-php">5.1 php</a>
<ul>
<li><a href="#511-standards-library">5.1.1 standards library</a>
<ul>
<li><a href="#5111-hash">5.1.1.1 Hash</a></li>
<li><a href="#5112-%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95%E5%87%BD%E6%95%B0">5.1.1.2 密码散列算法函数</a></li>
</ul>
</li>
<li><a href="#512-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93">5.1.2 第三方库</a>
<ul>
<li><a href="#5121-openssl">5.1.2.1 OpenSSL</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#52-python">5.2 python</a>
<ul>
<li><a href="#521-standards-library">5.2.1 standards library</a>
<ul>
<li><a href="#5211-hashlib">5.2.1.1 hashlib</a></li>
<li><a href="#5212-hmac">5.2.1.2 hmac</a></li>
</ul>
</li>
<li><a href="#522-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93">5.2.2 第三方库</a>
<ul>
<li><a href="#5221-cryptography">5.2.2.1 cryptography</a></li>
<li><a href="#5222-voidspace">5.2.2.2 VoidSpace</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#53-go">5.3 go</a>
<ul>
<li><a href="#531-standards-library">5.3.1 standards library</a>
<ul>
<li><a href="#5311-crypto">5.3.1.1 crypto</a></li>
<li><a href="#5312-crypto%E5%8C%85%E4%B8%8B%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E5%8C%85">5.3.1.2 crypto包下其他加密包</a></li>
</ul>
</li>
<li><a href="#532-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93">5.3.2 第三方库</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#6-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%82%B9">6. 密码学知识点</a>
<ul>
<li><a href="#md5">md5</a></li>
<li><a href="#%E6%85%A2%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0">慢哈希函数</a></li>
<li><a href="#argon2">ARGON2</a></li>
<li><a href="#rc2_40">RC2_40</a></li>
<li><a href="#smime">SMIME</a></li>
<li><a href="#s%E7%9B%92">S盒</a></li>
<li><a href="#rc4">RC4</a></li>
<li><a href="#sha1">SHA1</a></li>
<li><a href="#pkcs7_detached">PKCS7_DETACHED</a></li>
<li><a href="#openssl_pkcs1_padding">OPENSSL_PKCS1_PADDING</a></li>
<li><a href="#ecdsa">ecdsa</a></li>
<li><a href="#subtle">subtle</a></li>
</ul>
</li>
<li><a href="#7-bucket-%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF">7. Bucket 配置错误</a></li>
<li><a href="#8-non-interactive-cryptographic-timestamping-based-on-verifiable-delay-functions">8. 《Non-interactive cryptographic timestamping based on verifiable delay functions》</a></li>
<li><a href="#9-sha1collisiondetection">9. sha1collisiondetection</a></li>
<li><a href="#10-on-immutability-of-blockchains">10. 《On immutability of blockchains》</a></li>
<li><a href="#11-collect-crypto-2021-paper">11. collect Crypto 2021 Paper</a></li>
<li><a href="#12-a-hackers-guide-to-reducing-side-channel-attack-surfaces-using-deep-learning">12. A Hacker’s guide to reducing side-channel attack surfaces using deep-learning</a></li>
<li><a href="#13-%E5%9F%BA%E4%BA%8E%E6%97%81%E8%B7%AF%E6%94%BB%E5%87%BB%E7%9A%84aes%E7%AE%97%E6%B3%95%E4%B8%AD%E9%97%B4%E5%8F%98%E9%87%8F%E8%84%86%E5%BC%B1%E7%82%B9">13. 基于旁路攻击的AES算法中间变量脆弱点</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</p>
<h1 id="defcon-2018-qualify-easy-pisy">Defcon 2018 Qualify: Easy Pisy</h1>
<h2 id="1-source-code">1. Source Code</h2>
<p>题目给了俩PHP：</p>
<ul>
<li><code>execute.php</code></li>
</ul>
<pre><code class="language-php">&lt;?php

include 'common.php';

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
  print highlight_string(file_get_contents(&quot;execute.php&quot;), TRUE);
  exit(0);
}

$keys = get_keys();
$privkey = $keys[0];
$pubkey = $keys[1];

$file_info = $_FILES['userfile'];
check_uploaded_file($file_info);

$data = file_get_contents($file_info['tmp_name']);
$signature = hex2bin($_POST['signature']);
if (openssl_verify($data, $signature, $pubkey)) {
  print 'Signature is OK.&lt;br/&gt;';
} else {
  die('Bad signature.');
}

$text = pdf_to_text($file_info['tmp_name']);
print &quot;Text: \&quot;$text\&quot;&lt;br/&gt;&quot;;

$execute_query = &quot;EXECUTE &quot;;
$echo_query = &quot;ECHO &quot;;
if (substr($text, 0, strlen($execute_query)) === $execute_query) {
  $payload = substr($text, strlen($execute_query));
  print &quot;About to execute: \&quot;$payload\&quot;.&lt;br/&gt;&quot;;
  $out = shell_exec($payload);
  print &quot;Output: $out&quot;;
} else if (substr($text, 0, strlen($echo_query)) === $echo_query) {
  $payload = substr($text, strlen($echo_query));
  print &quot;About to echo: \&quot;$payload\&quot;.&lt;br/&gt;&quot;;
  echo $payload;
} else {
  print &quot;I can't recognize the command type. Go away.&lt;br/&gt;&quot;;
}

?&gt;
</code></pre>
<ul>
<li><code>shellme.php</code></li>
</ul>
<pre><code class="language-php">&lt;?php

include 'common.php';

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
  print highlight_string(file_get_contents(&quot;sign.php&quot;), TRUE);
  exit(0);
}

$keys = get_keys();
$privkey = $keys[0];
$pubkey = $keys[1];

if ($privkey === FALSE || $pubkey === FALSE) {
  die(&quot;Could not load keys. Contact admin.&lt;br/&gt;&quot;);
}

$file_info = $_FILES['userfile'];
check_uploaded_file($file_info);

$text = pdf_to_text($file_info['tmp_name']);
print &quot;Extracted text: \&quot;$text\&quot;&lt;br/&gt;&quot;;

$execute_query = &quot;EXECUTE &quot;;
$echo_query = &quot;ECHO &quot;;
if (substr($text, 0, strlen($execute_query)) === $execute_query) {
  print &quot;I don't sign EXECUTE commands. Go away.&lt;br/&gt;&quot;;
} else if (substr($text, 0, strlen($echo_query)) === $echo_query) {
  print &quot;I'm OK with ECHO commands. Here is the signature: &lt;br/&gt;&quot;;
  $data = file_get_contents($file_info['tmp_name']);
  openssl_sign($data, $signature, $privkey);
  print bin2hex($signature);
} else {
  print &quot;I can't recognize the command type. Go away.&lt;br/&gt;&quot;;
}

?&gt;
</code></pre>
<h2 id="2-writeup">2. Writeup</h2>
<ul>
<li>
<p>shellme.php是入口，用户将首位为<code>ECHO</code>的pdf上传，得到<code>signature</code></p>
</li>
<li>
<p>将<code>signature</code>和pdf上传给<code>execute.php</code></p>
<ul>
<li>首先检查<code>signature</code>一致性</li>
<li>如果pdf首位为<code>ECHO</code>则显示PDF内容</li>
<li>如果pdf首位为<code>EXECUTE</code>则执行PDF内容</li>
</ul>
</li>
</ul>
<p>这道题的考点在<code>检查signature一致性</code>这里，<br>
注意题目中验证签名用的函数是<code>openssl_verify</code><br>
该函数默认使用<code>sha1</code>算法进行签名<br>
由于<code>sha1</code><a href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html">不安全</a>，我们可以使用<a href="https://github.com/nneonneo/sha1collider">工具</a>碰撞出首位为<code>EXECUTE</code>而非<code>ECHO</code>,但<code>signature</code>一致的pdf内容,从而RCE。</p>
<h2 id="3-info">3. Info</h2>
<p>challenge source code <a href="https://gist.github.com/janmasarik/232381eec3918313b5b4d2c20ca1ed0f">https://gist.github.com/janmasarik/232381eec3918313b5b4d2c20ca1ed0f</a></p>
<p>CTF Time writeup <a href="https://ctftime.org/task/6094">https://ctftime.org/task/6094</a></p>
<p>Writeup provider teams:</p>
<ul>
<li>mhackeroni</li>
<li>EmpireCTF</li>
<li>tuna$laves</li>
</ul>
<p>Author：Not Found, But Maybe</p>
<ul>
<li><a href="https://gist.github.com/janmasarik/">https://gist.github.com/janmasarik/</a> 就这哥们儿有题目源码</li>
<li><a href="https://github.com/nneonneo">https://github.com/nneonneo/</a> 这位哥在题目之前写了对应的工具</li>
<li>Marc Stevens(CWI Amsterdam) 这位是《Announcing the first SHA1 collision》一作</li>
<li>Elie Bursztein (Google) 《Announcing the first SHA1 collision》二作</li>
</ul>
<p>writeup for study: <a href="https://github.com/0e85dc6eaf/CTF-Writeups/tree/05ad6a9ecbc19ceb8890f4581dfee36f16d164aa/DEF%20CON%20CTF%20Qualifier%202018/Easy%20Pisy#easy-pisy">https://github.com/0e85dc6eaf/CTF-Writeups/tree/05ad6a9ecbc19ceb8890f4581dfee36f16d164aa/DEF%20CON%20CTF%20Qualifier%202018/Easy%20Pisy#easy-pisy</a></p>
<p>tools used:</p>
<ul>
<li><a href="https://github.com/nneonneo/sha1collider">https://github.com/nneonneo/sha1collider</a></li>
<li><a href="https://github.com/cr-marcstevens/sha1collisiondetection">https://github.com/cr-marcstevens/sha1collisiondetection</a></li>
</ul>
<h2 id="4-analysis-of-author">4. Analysis of Author</h2>
<p>由于还不能确定这道题的出题人是谁，就先面向目前可能性比较大的前四位分析。</p>
<h3 id="41-janmasarik">4.1 janmasarik</h3>
<ul>
<li>languages
<ul>
<li>python\go\php</li>
</ul>
</li>
<li>社交媒体
<ul>
<li>https://twitter.com/s14ve</li>
<li>https://masarik.sh/</li>
</ul>
</li>
<li>Recent
<ul>
<li><a href="https://github.com/janmasarik/resolvers">resolvers</a> DNS拦截的检查工具？20210416</li>
<li><a href="https://github.com/janmasarik/low-hanging">low-hanging</a> 漏洞扫描器</li>
<li><a href="https://github.com/janmasarik/bucketsperm">bucketsperm</a> 用上面的low-hanging做的 云存储桶 权限 漏洞扫描器？</li>
<li><a href="https://is.muni.cz/th/de05t/master_thesis_final.pdf">Automating Bug Bounty</a> 论文:自动挖漏洞？这个好像专门挖云存储漏洞，应该和bucketsperm有联动</li>
</ul>
</li>
</ul>
<p>jan.masarik先生19年至今的动态主要在云存储漏洞的自动挖掘上。</p>
<h3 id="42-nneonneo-robert-xiao">4.2 nneonneo (Robert Xiao)</h3>
<ul>
<li>languages
<ul>
<li>python</li>
</ul>
</li>
<li>社交媒体
<ul>
<li>https://twitter.com/nneonneo</li>
<li>https://www.robertxiao.ca</li>
</ul>
</li>
<li>Recent
<ul>
<li><a href="https://github.com/nneonneo/ghidra">Ghidra 逆向工具</a></li>
<li><a href="https://github.com/nneonneo/iOS-Torrent-Client">iOS-Torrent-Client</a></li>
<li><a href="https://github.com/nneonneo/iOS-SOCKS-Server">ios-sock</a></li>
<li><a href="https://github.com/nneonneo/ntfsrecover">ntfsrecover</a></li>
</ul>
</li>
</ul>
<p>nneonneo 大佬2020年底的github动态都是在搞RE和PWN，做的研究工作都比较偏底层。应该不会出web的题目⑧<br>
而且nneonneo大佬似乎是CTFer而非出题人，但他是怎么在出题之前设计出做题工具的呢<br>
说明他看了Marc的文章..</p>
<h3 id="43-marc-stevens">4.3 Marc Stevens</h3>
<ul>
<li>
<p>languages</p>
<ul>
<li>C/C++</li>
</ul>
</li>
<li>
<p>社交媒体</p>
<ul>
<li><a href="https://github.com/cr-marcstevens">Github</a></li>
<li><a href="https://scholar.google.nl/citations?user=ObZrtPYAAAAJ&amp;hl=nl">google学术</a></li>
<li><a href="https://marc-stevens.nl/research/">个人博客</a></li>
</ul>
</li>
<li>
<p>Recent</p>
<ul>
<li><a href="https://eprint.iacr.org/2019/197.pdf">Non-interactive cryptographic timestamping based on verifiable delay functions 2020</a></li>
<li><a href="https://ir.cwi.nl/pub/29339/29339.pdf">Real World Cryptanalysis 2019</a></li>
<li><a href="https://www.h2020prometheus.eu/sites/default/files/2019-11/The%20General%20Sieve%20Kernel%20and%20New%20Records%20in%20Lattice%20Reduction.pdf">The general sieve kernel and new records in lattice reduction</a></li>
<li><a href="https://github.com/cr-marcstevens/sha1collisiondetection">sha1collisiondetection</a> 但这个似乎还是18年defcon的EasyPisy考点</li>
<li><a href="https://github.com/cr-marcstevens/snippets">snippets</a> Marc个人的脚本收集仓库</li>
</ul>
</li>
<li>
<p>学习一下<code>Non-interactive cryptographic timestamping based on verifiable delay functions</code></p>
</li>
<li>
<p>仔细看一下<code>sha1collisiondetection</code>的更新细节，也许更新了新的知识点可以出题？</p>
</li>
<li>
<p>这位老师还写了一篇区块链的文章 <a href="https://dl.eusset.eu/bitstream/20.500.12015/3160/1/blockchain2018_04.pdf">On immutability of blockchains</a></p>
</li>
</ul>
<h3 id="44-elie-bursztein-google">4.4 Elie Bursztein (Google)</h3>
<ul>
<li>languages
<ul>
<li>Python/PHP</li>
</ul>
</li>
<li>社交媒体
<ul>
<li><a href="https://elie.net">个人博客</a></li>
<li><a href="https://github.com/ebursztein?tab=repositories">Github</a></li>
<li><a href="https://scholar.google.com/citations?hl=zh-CN&amp;user=Ayw4GsAAAAAJ&amp;view_op=list_works&amp;sortby=pubdate">Google Scholar</a></li>
</ul>
</li>
<li>Recent
<ul>
<li><a href="https://research.google/pubs/pub49786.pdf">Sok: Hate, harassment, and the changing landscape of online abuse 2021</a></li>
<li><a href="https://research.google/pubs/pub49626.pdf">Spotlight: Malware Lead Generation at Scale</a></li>
<li><a href="https://research.google/pubs/pub49775.pdf">Who is targeted by email-based phishing and malware? Measuring factors that differentiate risk</a></li>
<li><a href="https://arxiv.org/pdf/2006.10861">Coinpolice: Detecting hidden cryptojacking attacks with neural networks</a></li>
</ul>
</li>
</ul>
<p>尽管是《Announcing the first SHA1 collision》二作，Elie的主要精力还是投入在了Phishing、Malware、Abuse等领域。</p>
<blockquote>
<p>我比较喜欢他博客里这些没有数学公式的科普文章，像看小说一样欢乐。我女朋友则喜欢有逻辑推导、数学演算的东西，会更优美、更艺术一些...</p>
</blockquote>
<p>从领域相匹配度的角度分析,Elie也比较符合EasyPisy出题人的画像。<br>
不过博客里几乎没看到有关CTF的内容。</p>
<ul>
<li><a href="https://elie.net/talk/a-hacker-guide-to-side-channel-attack-surface-reduction-using-deep-learning/">A Hacker’s guide to reducing side-channel attack surfaces using deep-learning</a></li>
</ul>
<p>这个&quot;基于深度学习来防御旁路攻击&quot;的思路宣讲于<code>Defcon 28</code>&amp;<code>Black Hat USA 2020</code> // TODO<br>
密码学旁路攻击: <a href="http://www.arocmag.com/getarticle?aid=93341d415ab5a106">基于旁路攻击的AES算法中间变量脆弱点</a> // TODO</p>
<h2 id="5-语言中的签名函数">5. 语言中的签名函数</h2>
<p>先找一下各语言标准库中的签名函数，再进一步找第三方库中引入的签名函数。</p>
<h3 id="51-php">5.1 php</h3>
<p>https://www.php.net/manual/zh/function.hash-hmac-file.php<br>
https://segmentfault.com/a/1190000020201103<br>
https://www.php.net/manual/zh/ref.openssl.php</p>
<h4 id="511-standards-library">5.1.1 <a href="https://www.php.net/manual/zh/refs.crypto.php">standards library</a></h4>
<h5 id="5111-hash">5.1.1.1 <a href="https://www.php.net/manual/zh/book.hash.php">Hash</a></h5>
<p>PHP 5.1.2开始，Hash成为内置拓展。<br>
PHP 7.4.0开始，Hash成为核心拓展，可以直接使用其函数。<br>
Hash 函数</p>
<ul>
<li>hash_algos — 返回已注册的哈希算法列表</li>
<li>hash_copy — 拷贝哈希运算上下文</li>
<li>hash_equals — 可防止时序攻击的字符串比较</li>
<li>hash_file — 给指定文件的内容生成哈希值</li>
<li>hash_final — 结束增量哈希，并且返回摘要结果</li>
<li>hash_hkdf — Generate a HKDF key derivation of a supplied key input</li>
<li>hash_hmac_algos — Return a list of registered hashing algorithms suitable for hash_hmac</li>
<li>hash_hmac_file — 使用 HMAC 方法和给定文件的内容生成带密钥的哈希值</li>
<li>hash_hmac — 使用 HMAC 方法生成带有密钥的哈希值</li>
<li>hash_init — 初始化增量哈希运算上下文</li>
<li>hash_pbkdf2 — 生成所提供密码的 PBKDF2 密钥导出</li>
<li>hash_update_file — 从文件向活跃的哈希运算上下文中填充数据</li>
<li>hash_update_stream — 从打开的流向活跃的哈希运算上下文中填充数据</li>
<li>hash_update — 向活跃的哈希运算上下文中填充数据</li>
<li>hash — 生成哈希值 （消息摘要）</li>
</ul>
<blockquote>
<p>Hash系列函数的<code>algo</code>参数没有默认值。</p>
</blockquote>
<h5 id="5112-密码散列算法函数">5.1.1.2 <a href="https://www.php.net/manual/zh/ref.password.php">密码散列算法函数</a></h5>
<p>下列函数可以直接调用</p>
<blockquote>
<p>如果要使用 Argon2 密码哈希，PHP 必须用 --with-password-argon2[=DIR] 配置选项和 libargon2 构建。<br>
密码散列算法函数</p>
</blockquote>
<ul>
<li>password_algos — Get available password hashing algorithm IDs</li>
<li>password_get_info — 返回指定散列（hash）的相关信息</li>
<li>password_hash — 创建密码的散列（hash）</li>
<li>password_needs_rehash — 检测散列值是否匹配指定的选项</li>
<li>password_verify — 验证密码是否和散列值匹配<br>
<code>password_hash</code>所有可用的签名算法<a href="https://www.php.net/manual/zh/password.constants.php">如下</a></li>
<li>PASSWORD_BCRYPT (default) <a href="https://en.wikipedia.org/wiki/Bcrypt">学习链接</a></li>
<li>PASSWORD_ARGON2I <a href="https://zhuanlan.zhihu.com/p/80490980">学习链接</a></li>
<li>PASSWORD_ARGON2ID</li>
<li>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</li>
<li>PASSWORD_ARGON2_DEFAULT_TIME_COST</li>
<li>PASSWORD_ARGON2_DEFAULT_THREADS<br>
慢哈希函数<a href="https://tate-young.github.io/2019/05/21/bcrypt.html">学习链接</a> // 这啥啊，看不懂...等女朋友看完讲一下吧...<br>
ARGON2<a href="https://github.com/P-H-C/phc-winner-argon2/raw/master/argon2-specs.pdf">学习链接</a></li>
</ul>
<h4 id="512-第三方库">5.1.2 第三方库</h4>
<h5 id="5121-openssl">5.1.2.1 <a href="https://www.php.net/manual/zh/ref.openssl.php">OpenSSL</a></h5>
<p>要使用 PHP 的 OpenSSL 模块时，须使用 --with-openssl[=DIR] 参数来编译 PHP。<br>
OpenSSL库所有的函数如下</p>
<pre><code>openssl_cipher_iv_length — 获取密码iv长度
openssl_cms_decrypt — Decrypt a CMS message
openssl_cms_encrypt — Encrypt a CMS message
openssl_cms_read — Export the CMS file to an array of PEM certificates
openssl_cms_sign — Sign a file
openssl_cms_verify — Verify a CMS signature
openssl_csr_export_to_file — 将CSR导出到文件
openssl_csr_export — 将CSR作为字符串导出
openssl_csr_get_public_key — 返回CSR的公钥
openssl_csr_get_subject — 返回CSR的主题
openssl_csr_new — 生成一个 CSR
openssl_csr_sign — 用另一个证书签署 CSR (或者本身) 并且生成一个证书
openssl_decrypt — 解密数据
openssl_dh_compute_key — 计算远程DH密钥(公钥)和本地DH密钥的共享密钥
openssl_digest — 计算摘要
openssl_encrypt — 加密数据
openssl_error_string — 返回 openSSL 错误消息
openssl_free_key — 释放密钥资源
openssl_get_cert_locations — 检索可用的证书位置
openssl_get_cipher_methods — 获取可用的加密算法
openssl_get_curve_names — 获得ECC的可用曲线名称列表
openssl_get_md_methods — 获取可用的摘要算法
openssl_get_privatekey — 别名 openssl_pkey_get_private
openssl_get_publickey — 别名 openssl_pkey_get_public
openssl_open — 打开密封的数据
openssl_pbkdf2 — 生成一个 PKCS5 v2 PBKDF2 字符串
openssl_pkcs12_export_to_file — 输出一个 PKCS#12 兼容的证书存储文件
openssl_pkcs12_export — 将 PKCS#12 兼容证书存储文件导出到变量
openssl_pkcs12_read — 将 PKCS#12 证书存储区解析到数组中
openssl_pkcs7_decrypt — 解密一个 S/MIME 加密的消息
openssl_pkcs7_encrypt — 加密一个 S/MIME 消息
openssl_pkcs7_read — 将PKCS7文件导出为PEM格式证书的数组
openssl_pkcs7_sign — 对一个 S/MIME 消息进行签名
openssl_pkcs7_verify — 校验一个已签名的 S/MIME 消息的签名
openssl_pkey_derive — Computes shared secret for public value of remote and local DH or ECDH key
openssl_pkey_export_to_file — 将密钥导出到文件中
openssl_pkey_export — 将一个密钥的可输出表示转换为字符串
openssl_pkey_free — 释放一个私钥
openssl_pkey_get_details — 返回包含密钥详情的数组
openssl_pkey_get_private — 获取私钥
openssl_pkey_get_public — 从证书中解析公钥，以供使用。
openssl_pkey_new — 生成一个新的私钥
openssl_private_decrypt — 使用私钥解密数据
openssl_private_encrypt — 使用私钥加密数据
openssl_public_decrypt — 使用公钥解密数据
openssl_public_encrypt — 使用公钥加密数据
openssl_random_pseudo_bytes — 生成一个伪随机字节串
openssl_seal — 密封 (加密) 数据
openssl_sign — Generate signature
openssl_spki_export_challenge — 导出与签名公钥和挑战相关的挑战字符串
openssl_spki_export — 通过签名公钥和挑战导出一个可用的PEM格式的公钥
openssl_spki_new — 生成一个新的签名公钥和挑战
openssl_spki_verify — 验证签名公钥和挑战。
openssl_verify — 验证签名
openssl_x509_check_private_key — 检查私钥是否对应于证书
openssl_x509_checkpurpose — 验证是否可以为特定目的使用证书
openssl_x509_export_to_file — 导出证书至文件
openssl_x509_export — 以字符串格式导出证书
openssl_x509_fingerprint — 计算一个给定的x.509证书的指纹或摘要
openssl_x509_free — 释放证书资源
openssl_x509_parse — 解析一个X509证书并作为一个数组返回信息
openssl_x509_read — 解析一个x.509证书并返回一个资源标识符
openssl_x509_verify — Verifies digital signature of x509 certificate against a public key
</code></pre>
<p>以默认算法对openssl库函数进行分类,如下:<br>
默认加密算法: <code>OPENSSL_CIPHER_RC2_40</code>的函数</p>
<ul>
<li>openssl_cms_encrypt</li>
<li>openssl_pkcs7_encrypt</li>
</ul>
<p>默认编码方法:<code>OPENSSL_ENCODING_SMIME</code>的函数</p>
<ul>
<li>openssl_cms_verify</li>
<li>openssl_cms_sign</li>
</ul>
<p>默认加解密方法:<code>RC4</code>的函数</p>
<ul>
<li>openssl_open</li>
<li>openssl_seal</li>
</ul>
<p>默认签名算法: <code>SHA1</code>的函数</p>
<ul>
<li>openssl_pbkdf2</li>
<li>openssl_sign</li>
<li>openssl_verify</li>
<li>openssl_x509_fingerprint</li>
</ul>
<p>默认签名Flag: <code>PKCS7_DETACHED</code>的函数</p>
<ul>
<li>openssl_​pkcs7_​sign</li>
</ul>
<p>默认Padding:<code>OPENSSL_PKCS1_PADDING</code>的函数</p>
<ul>
<li>openssl_private_decrypt</li>
<li>openssl_private_encrypt</li>
<li>openssl_public_decrypt</li>
<li>openssl_public_encrypt</li>
</ul>
<h3 id="52-python">5.2 python</h3>
<h4 id="521-standards-library">5.2.1 standards library</h4>
<h5 id="5211-hashlib">5.2.1.1 <a href="https://docs.python.org/3.6/library/hashlib.html">hashlib</a></h5>
<p>hashlib底层代码为openssl开源库，openssl支持的方法，hashlib都能支持。<br>
所有支持的方法有:</p>
<pre><code>DSA, DSA-SHA, MD4, MD5, RIPEMD160, SHA, SHA1, SHA224, SHA256,
SHA384, SHA512, blake2b, blake2s, dsaEncryption, dsaWithSHA,
ecdsa-with-SHA1, md4, md5, ripemd160, sha, sha1, sha224, sha256,
sha384, sha3_224, sha3_256, sha3_384, sha3_512, sha512,
shake_128, shake_256, whirlpool
</code></pre>
<p>其中，无论执行运行环境是什么操作系统，都必然可用的方法有:</p>
<pre><code>blake2b, blake2s, md5, sha1, sha224, sha256, sha384, sha3_224, sha3_256, sha3_384, sha3_512, sha512, shake_128, shake_256
</code></pre>
<blockquote>
<p>不同环境的<code>algorithms_guaranteed</code>不同<br>
这里的环境为<code>Python3.7.7 MacOS 10.14.6</code></p>
</blockquote>
<p>hashlib使用方法如下:</p>
<pre><code class="language-python">import hashlib
h = hashlib.md5()
h.update(&quot;hello&quot;.encode('utf-8'))
print(h.hexdigest())

h = hashlib.sha1()
h.update(&quot;hello&quot;.encode('utf-8'))
print(h.hexdigest())
</code></pre>
<p>hashlib用方法名初始化,代码如下:</p>
<pre><code>hash_name = &quot;sha1&quot;
h = hashlib.new(hash_name)
h.update(args.data.encode('utf-8'))
print(h.hexdigest())
</code></pre>
<p>这种不明说用了什么hash的写法更方便出题。</p>
<h5 id="5212-hmac">5.2.1.2 hmac</h5>
<p>规范hmac的<a href="https://tools.ietf.org/html/rfc2104.html">RFC标准</a><br>
hmac是一个检查通信过程中消息完整性的标准化实现</p>
<p>使用方法如下</p>
<pre><code class="language-python">import hmac
import hashlib

h = hmac.new(b'secret-shared-key', 'hello', hashlib.sha1)
digest = h.hexdigest()
print(digest)
</code></pre>
<p>hmac.new函数的参数有三个：秘钥、消息、签名算法<br>
其中，签名算法默认为<code>md5</code></p>
<h4 id="522-第三方库">5.2.2 第三方库</h4>
<h5 id="5221-cryptography">5.2.2.1 cryptography</h5>
<p><a href="https://pypi.org/project/cryptography/">Cryptography</a>：一个提供了加密算法和原语的 python 包。</p>
<h5 id="5222-voidspace">5.2.2.2 VoidSpace</h5>
<p><a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2006_10_07.shtml#e497">VoidSpace</a> 是 适用于IronPython的Hashlib装饰器</p>
<h3 id="53-go">5.3 go</h3>
<h4 id="531-standards-library">5.3.1 standards library</h4>
<h5 id="5311-crypto">5.3.1.1 crypto</h5>
<p>所有可用的Hash方法如下</p>
<pre><code class="language-go">const (
    MD4         Hash = 1 + iota // import golang.org/x/crypto/md4
    MD5                         // import crypto/md5
    SHA1                        // import crypto/sha1
    SHA224                      // import crypto/sha256
    SHA256                      // import crypto/sha256
    SHA384                      // import crypto/sha512
    SHA512                      // import crypto/sha512
    MD5SHA1                     // no implementation; MD5+SHA1 used for TLS RSA
    RIPEMD160                   // import golang.org/x/crypto/ripemd160
    SHA3_224                    // import golang.org/x/crypto/sha3
    SHA3_256                    // import golang.org/x/crypto/sha3
    SHA3_384                    // import golang.org/x/crypto/sha3
    SHA3_512                    // import golang.org/x/crypto/sha3
    SHA512_224                  // import crypto/sha512
    SHA512_256                  // import crypto/sha512
    BLAKE2s_256                 // import golang.org/x/crypto/blake2s
    BLAKE2b_256                 // import golang.org/x/crypto/blake2b
    BLAKE2b_384                 // import golang.org/x/crypto/blake2b
    BLAKE2b_512                 // import golang.org/x/crypto/blake2b
)
</code></pre>
<p>使用方法，以<code>MD5举例</code></p>
<pre><code class="language-go">func GetMd5String(s string) string {
    h := md5.New()
    h.Write([]byte(s))
    return hex.EncodeToString(h.Sum(nil))
}
</code></pre>
<h5 id="5312-crypto包下其他加密包">5.3.1.2 crypto包下其他加密包</h5>
<pre><code>aes,cipher,des,dsa,ecdsa,elliptic,hmac,md5,rand,rc4,rsa,sha1,sha256,sha512,subtle,tls,x509
</code></pre>
<h4 id="532-第三方库">5.3.2 第三方库</h4>
<p>Golang似乎没有特别主流的第三方加密库，标准库已经可以解决大部分需求。</p>
<h2 id="6-密码学知识点">6. 密码学知识点</h2>
<h3 id="md5">md5</h3>
<p><a href="https://en.wikipedia.org/wiki/MD5">https://en.wikipedia.org/wiki/MD5</a><br>
<a href="https://zhuanlan.zhihu.com/p/37257569">https://zhuanlan.zhihu.com/p/37257569</a></p>
<h3 id="慢哈希函数">慢哈希函数</h3>
<p><a href="https://tate-young.github.io/2019/05/21/bcrypt.html">https://tate-young.github.io/2019/05/21/bcrypt.html</a><br>
对了对抗用字典暴破的攻击者，设计出了这种慢哈希函数。<br>
除了所有哈希函数都具备的&quot;给hash，让反着算，算不出来原文&quot;的特性外，同时“有原文，正着算Hash,特别特别慢”<br>
比如<code>bcrypt</code>,<code>scrypt</code>,<code>PBKDF2</code>等<br>
python的bcrypt写法如下:</p>
<pre><code class="language-python">import bcrypt

passwd = b's$cret12'

salt = bcrypt.gensalt()
hashed = bcrypt.hashpw(passwd, salt)

print(salt)
print(hashed)
</code></pre>
<h3 id="argon2">ARGON2</h3>
<p><a href="https://github.com/P-H-C/phc-winner-argon2/raw/master/argon2-specs.pdf">https://github.com/P-H-C/phc-winner-argon2/raw/master/argon2-specs.pdf</a><br>
<a href="https://eprint.iacr.org/2016/759.pdf">Towards Practical Attacks on Argon2i and Balloon Hashing</a><br>
也是一种慢哈希函数。<br>
<code>Memory-hard hash function</code>：通过提高算法中内存的使用量，来提高算法的Hash的耗时。</p>
<h3 id="rc2_40">RC2_40</h3>
<p>http://cryptowiki.net/index.php?title=RC2/40_english<br>
https://github.com/SaschaWessel/rc2-40-cbc</p>
<h3 id="smime">SMIME</h3>
<p><a href="https://www.cse.scu.edu/~tschwarz/coen350_03/Lectures/smime.html">https://www.cse.scu.edu/~tschwarz/coen350_03/Lectures/smime.html</a><br>
<a href="https://zh.wikipedia.org/zh-hans/S/MIME">https://zh.wikipedia.org/zh-hans/S/MIME</a><br>
安全的电子邮件加密方式<br>
<a href="https://4hou.win/wordpress/?p=15890">如何使用SMIME</a></p>
<h3 id="s盒">S盒</h3>
<p><a href="https://zh.wikipedia.org/wiki/S%E7%9B%92">https://zh.wikipedia.org/wiki/S%E7%9B%92</a><br>
通常，S-Box接受特定数量的输入比特m，并将其转换为特定数量的输出比特n，其中n 不一定等于m[1]。一个m×n的S盒可以通过包含2m条目，每条目n比特的查找表实现。<br>
S盒通常是固定的（例如DES和AES加密算法）, 也有一些加密算法的S盒是基于密钥动态生成的（例如Blowfish和双鱼算法加密算法）。</p>
<h3 id="rc4">RC4</h3>
<p>https://zh.wikipedia.org/zh-hans/RC4</p>
<h3 id="sha1">SHA1</h3>
<p>https://zh.wikipedia.org/wiki/SHA-1</p>
<h3 id="pkcs7_detached">PKCS7_DETACHED</h3>
<p>https://segmentfault.com/a/1190000019793040</p>
<h3 id="openssl_pkcs1_padding">OPENSSL_PKCS1_PADDING</h3>
<p>https://blog.csdn.net/liuxianbing119/article/details/7405628</p>
<h3 id="ecdsa">ecdsa</h3>
<p>https://zhuanlan.zhihu.com/p/97953640</p>
<h3 id="subtle">subtle</h3>
<blockquote>
<p>subtle不仅是golang加密包的名字，还是一个男士挎包品牌。<br>
看上去是那种明明很奢华，但在我身上就被穿成地摊货的款式...<br>
诶，又走神了<br>
<img src="https://img-blog.csdnimg.cn/20210426135026387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></p>
</blockquote>
<p>https://documentation.help/Golang/crypto_subtle.htm</p>
<h2 id="7-bucket-配置错误">7. Bucket 配置错误</h2>
<p>jan.masarik先生19年至今的动态主要在云存储漏洞的自动挖掘上。<br>
- <a href="https://github.com/janmasarik/bucketsperm">bucketsperm</a><br>
- <a href="https://is.muni.cz/th/de05t/master_thesis_final.pdf">Automating Bug Bounty</a></p>
<p>先来学习一下Bucket错误配置漏洞是咋回事。<br>
<a href="https://www.cyclonis.com/zh-hans/thousands-of-patients-data-been-breached-misconfigured-amazon-s3-buckets/">由于配置错误的Amazon S3存储桶导致成千上万的患者数据遭到破坏</a><br>
使用OSS时须先创建Bucket存储空间。<br>
<a href="https://help.aliyun.com/document_detail/31885.html">阿里云如何创建Bucket</a><br>
在jan.masarik先生的论文中，总结了用户在创建buckets时经常犯的错误：</p>
<ul>
<li><strong>不配置权限限制ACL，所有内容public</strong><a href="https://help.aliyun.com/document_detail/66168.html">导致敏感信息泄露</a></li>
<li>同时很多人会像命名变量那样，<strong>以bucket的用途来命名bucket</strong>。<br>
使得很多存储敏感信息的Bucket可以通过暴破子域名的方式被访问到。<br>
jan.masarik先生将这些可能存储敏感信息的bucket name汇总成了 下表中的Group2<br>
同时给出了，经常被使用 但一般不存储敏感信息的Bucket name Group 1<br>
<img src="https://img-blog.csdnimg.cn/20210426135054483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"><br>
在论文的最后，jan.masarik建议这些OSS 提供商设置bucket name黑名单。<br>
查阅文档，阿里云的OSS就没有这个限制。<br>
<img src="https://img-blog.csdnimg.cn/20210426135116978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"><br>
我在google和github上面随便找了几个oss的教程，<br>
访问了一下教程中的oss链接。</li>
<li>当bucket存在，path存在，但ACL private时，报如下错误。<br>
<img src="https://img-blog.csdnimg.cn/20210426135200857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></li>
<li>当bucket存在，但是path不存在时，报如下错误<br>
<img src="https://img-blog.csdnimg.cn/20210426135224307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></li>
<li>当bucket不存在时，报如下错误<br>
<img src="https://img-blog.csdnimg.cn/20210426135312511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></li>
<li>当bucket存在，path存在，同时还有访问权限时，就可以访问对应的文件或文件夹。<br>
<img src="https://img-blog.csdnimg.cn/20210426135330408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"><br>
暂时还没有找到ACL错误配置的oss bucket<br>
通过子域名解析的方式搜集了一些oss的链接，确实有Group2中的关键字。看上去的确诱人。<br>
<img src="https://img-blog.csdnimg.cn/20210426135351135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"><br>
然而访问结果欠佳，应该是bucket对应的子域名注销了oss服务。<br>
<img src="https://img-blog.csdnimg.cn/20210426135405976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlbWFvNDU0OA==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"><br>
暂时没有遇到jan先生论文里说的oss配置错误漏洞实例。</li>
</ul>
<h2 id="8-non-interactive-cryptographic-timestamping-based-on-verifiable-delay-functions">8. <a href="https://eprint.iacr.org/2019/197.pdf">《Non-interactive cryptographic timestamping based on verifiable delay functions》</a></h2>
<p>我们平常在web应用中的时间戳校验，都是依赖于某个权威服务器。<br>
为了实现去中心化，Marc Stevens提出了这种基于VDF的去中心化时间戳方案。</p>
<h2 id="9-sha1collisiondetection">9. <a href="https://github.com/cr-marcstevens/sha1collisiondetection">sha1collisiondetection</a></h2>
<p>TODO</p>
<h2 id="10-on-immutability-of-blockchains">10. <a href="https://dl.eusset.eu/bitstream/20.500.12015/3160/1/blockchain2018_04.pdf">《On immutability of blockchains》</a></h2>
<p>TODO</p>
<h2 id="11-collect-crypto-2021-paper">11. collect Crypto 2021 Paper</h2>
<p>TODO</p>
<h2 id="12-a-hackers-guide-to-reducing-side-channel-attack-surfaces-using-deep-learning">12. <a href="https://elie.net/talk/a-hacker-guide-to-side-channel-attack-surface-reduction-using-deep-learning/">A Hacker’s guide to reducing side-channel attack surfaces using deep-learning</a></h2>
<p>这个&quot;基于深度学习来防御旁路攻击&quot;的思路宣讲于<code>Defcon 28</code>&amp;<code>Black Hat USA 2020</code> // TODO</p>
<h2 id="13-基于旁路攻击的aes算法中间变量脆弱点">13. 基于旁路攻击的AES算法中间变量脆弱点</h2>
<p>密码学旁路攻击: <a href="http://www.arocmag.com/getarticle?aid=93341d415ab5a106">基于旁路攻击的AES算法中间变量脆弱点</a> // TODO</p>
<h1 id="总结">总结</h1>
<p>EasyPisy可能的出题人有四位，每个人可能的出题方向如下</p>
<ul>
<li>janmasarik: <strong>buckets未授权访问漏洞</strong>(WEB)</li>
<li>nneonneo (Robert Xiao): <strong>ios逆向</strong>(RE)</li>
<li>Marc Stevens: <strong>基于VDF的去中心化时间戳</strong>(BLOCKCHAIN)</li>
<li>Elie Bursztein (Google): <strong>AES旁路攻击</strong>(CRYPTO)</li>
</ul>
]]></content>
    </entry>
</feed>